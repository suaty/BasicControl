
BasicControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003858  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08003a30  08003a30  00013a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a58  08003a58  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a58  08003a58  00013a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a60  08003a60  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a64  08003a64  00013a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08003a74  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08003a74  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a83  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000167d  00000000  00000000  00029abf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008f8  00000000  00000000  0002b140  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002ba38  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000239a6  00000000  00000000  0002c268  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007d32  00000000  00000000  0004fc0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e31d3  00000000  00000000  00057940  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013ab13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a4  00000000  00000000  0013ab90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003a18 	.word	0x08003a18

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003a18 	.word	0x08003a18

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f000 fa21 	bl	8000962 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f80e 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 f8ba 	bl	800069c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f872 	bl	8000610 <MX_LPUART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800052c:	2120      	movs	r1, #32
 800052e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000532:	f000 fd53 	bl	8000fdc <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000536:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800053a:	f000 fa83 	bl	8000a44 <HAL_Delay>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800053e:	e7f5      	b.n	800052c <main+0x14>

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b0a8      	sub	sp, #160	; 0xa0
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800054a:	2238      	movs	r2, #56	; 0x38
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f003 fa5a 	bl	8003a08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000564:	463b      	mov	r3, r7
 8000566:	2254      	movs	r2, #84	; 0x54
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fa4c 	bl	8003a08 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000570:	2000      	movs	r0, #0
 8000572:	f000 fd71 	bl	8001058 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800057e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	2340      	movs	r3, #64	; 0x40
 8000582:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000584:	2302      	movs	r3, #2
 8000586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058a:	2302      	movs	r3, #2
 800058c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000590:	2304      	movs	r3, #4
 8000592:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000596:	2355      	movs	r3, #85	; 0x55
 8000598:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059c:	2302      	movs	r3, #2
 800059e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fdf4 	bl	80011a0 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005be:	f000 f8dd 	bl	800077c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2303      	movs	r3, #3
 80005c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80005d6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005da:	2108      	movs	r1, #8
 80005dc:	4618      	mov	r0, r3
 80005de:	f001 f8f7 	bl	80017d0 <HAL_RCC_ClockConfig>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <SystemClock_Config+0xac>
  {
    Error_Handler();
 80005e8:	f000 f8c8 	bl	800077c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80005ec:	2320      	movs	r3, #32
 80005ee:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005f4:	463b      	mov	r3, r7
 80005f6:	4618      	mov	r0, r3
 80005f8:	f001 fb06 	bl	8001c08 <HAL_RCCEx_PeriphCLKConfig>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000602:	f000 f8bb 	bl	800077c <Error_Handler>
  }
}
 8000606:	bf00      	nop
 8000608:	37a0      	adds	r7, #160	; 0xa0
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
	...

08000610 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_LPUART1_UART_Init+0x84>)
 8000616:	4a20      	ldr	r2, [pc, #128]	; (8000698 <MX_LPUART1_UART_Init+0x88>)
 8000618:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800061a:	4b1e      	ldr	r3, [pc, #120]	; (8000694 <MX_LPUART1_UART_Init+0x84>)
 800061c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000620:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_LPUART1_UART_Init+0x84>)
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_LPUART1_UART_Init+0x84>)
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_LPUART1_UART_Init+0x84>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000634:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_LPUART1_UART_Init+0x84>)
 8000636:	220c      	movs	r2, #12
 8000638:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063a:	4b16      	ldr	r3, [pc, #88]	; (8000694 <MX_LPUART1_UART_Init+0x84>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_LPUART1_UART_Init+0x84>)
 8000642:	2200      	movs	r2, #0
 8000644:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000646:	4b13      	ldr	r3, [pc, #76]	; (8000694 <MX_LPUART1_UART_Init+0x84>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800064c:	4811      	ldr	r0, [pc, #68]	; (8000694 <MX_LPUART1_UART_Init+0x84>)
 800064e:	f001 fd27 	bl	80020a0 <HAL_UART_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 8000658:	f000 f890 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800065c:	2100      	movs	r1, #0
 800065e:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_LPUART1_UART_Init+0x84>)
 8000660:	f003 f8c9 	bl	80037f6 <HAL_UARTEx_SetTxFifoThreshold>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <MX_LPUART1_UART_Init+0x5e>
  {
    Error_Handler();
 800066a:	f000 f887 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800066e:	2100      	movs	r1, #0
 8000670:	4808      	ldr	r0, [pc, #32]	; (8000694 <MX_LPUART1_UART_Init+0x84>)
 8000672:	f003 f8fe 	bl	8003872 <HAL_UARTEx_SetRxFifoThreshold>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_LPUART1_UART_Init+0x70>
  {
    Error_Handler();
 800067c:	f000 f87e 	bl	800077c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_LPUART1_UART_Init+0x84>)
 8000682:	f003 f87f 	bl	8003784 <HAL_UARTEx_DisableFifoMode>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_LPUART1_UART_Init+0x80>
  {
    Error_Handler();
 800068c:	f000 f876 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000028 	.word	0x20000028
 8000698:	40008000 	.word	0x40008000

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08a      	sub	sp, #40	; 0x28
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 0314 	add.w	r3, r7, #20
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	4b2f      	ldr	r3, [pc, #188]	; (8000770 <MX_GPIO_Init+0xd4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	4a2e      	ldr	r2, [pc, #184]	; (8000770 <MX_GPIO_Init+0xd4>)
 80006b8:	f043 0304 	orr.w	r3, r3, #4
 80006bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006be:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <MX_GPIO_Init+0xd4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006c2:	f003 0304 	and.w	r3, r3, #4
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ca:	4b29      	ldr	r3, [pc, #164]	; (8000770 <MX_GPIO_Init+0xd4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a28      	ldr	r2, [pc, #160]	; (8000770 <MX_GPIO_Init+0xd4>)
 80006d0:	f043 0320 	orr.w	r3, r3, #32
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b26      	ldr	r3, [pc, #152]	; (8000770 <MX_GPIO_Init+0xd4>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f003 0320 	and.w	r3, r3, #32
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e2:	4b23      	ldr	r3, [pc, #140]	; (8000770 <MX_GPIO_Init+0xd4>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a22      	ldr	r2, [pc, #136]	; (8000770 <MX_GPIO_Init+0xd4>)
 80006e8:	f043 0301 	orr.w	r3, r3, #1
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b20      	ldr	r3, [pc, #128]	; (8000770 <MX_GPIO_Init+0xd4>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006fa:	4b1d      	ldr	r3, [pc, #116]	; (8000770 <MX_GPIO_Init+0xd4>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <MX_GPIO_Init+0xd4>)
 8000700:	f043 0302 	orr.w	r3, r3, #2
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_GPIO_Init+0xd4>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0302 	and.w	r3, r3, #2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2120      	movs	r1, #32
 8000716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800071a:	f000 fc47 	bl	8000fac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800071e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000722:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000724:	4b13      	ldr	r3, [pc, #76]	; (8000774 <MX_GPIO_Init+0xd8>)
 8000726:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800072c:	f107 0314 	add.w	r3, r7, #20
 8000730:	4619      	mov	r1, r3
 8000732:	4811      	ldr	r0, [pc, #68]	; (8000778 <MX_GPIO_Init+0xdc>)
 8000734:	f000 fab8 	bl	8000ca8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000738:	2320      	movs	r3, #32
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f000 faa9 	bl	8000ca8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2028      	movs	r0, #40	; 0x28
 800075c:	f000 fa6f 	bl	8000c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000760:	2028      	movs	r0, #40	; 0x28
 8000762:	f000 fa86 	bl	8000c72 <HAL_NVIC_EnableIRQ>

}
 8000766:	bf00      	nop
 8000768:	3728      	adds	r7, #40	; 0x28
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000
 8000774:	10110000 	.word	0x10110000
 8000778:	48000800 	.word	0x48000800

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000790:	4b05      	ldr	r3, [pc, #20]	; (80007a8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	4a04      	ldr	r2, [pc, #16]	; (80007a8 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000796:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079a:	6093      	str	r3, [r2, #8]
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop
 80007a8:	40007000 	.word	0x40007000

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b2:	4b0f      	ldr	r3, [pc, #60]	; (80007f0 <HAL_MspInit+0x44>)
 80007b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007b6:	4a0e      	ldr	r2, [pc, #56]	; (80007f0 <HAL_MspInit+0x44>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6613      	str	r3, [r2, #96]	; 0x60
 80007be:	4b0c      	ldr	r3, [pc, #48]	; (80007f0 <HAL_MspInit+0x44>)
 80007c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	607b      	str	r3, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b09      	ldr	r3, [pc, #36]	; (80007f0 <HAL_MspInit+0x44>)
 80007cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ce:	4a08      	ldr	r2, [pc, #32]	; (80007f0 <HAL_MspInit+0x44>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	6593      	str	r3, [r2, #88]	; 0x58
 80007d6:	4b06      	ldr	r3, [pc, #24]	; (80007f0 <HAL_MspInit+0x44>)
 80007d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80007e2:	f7ff ffd3 	bl	800078c <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40021000 	.word	0x40021000

080007f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	; 0x28
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fc:	f107 0314 	add.w	r3, r7, #20
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4a17      	ldr	r2, [pc, #92]	; (8000870 <HAL_UART_MspInit+0x7c>)
 8000812:	4293      	cmp	r3, r2
 8000814:	d128      	bne.n	8000868 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <HAL_UART_MspInit+0x80>)
 8000818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800081a:	4a16      	ldr	r2, [pc, #88]	; (8000874 <HAL_UART_MspInit+0x80>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_UART_MspInit+0x80>)
 8000824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	613b      	str	r3, [r7, #16]
 800082c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_UART_MspInit+0x80>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a10      	ldr	r2, [pc, #64]	; (8000874 <HAL_UART_MspInit+0x80>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_UART_MspInit+0x80>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0301 	and.w	r3, r3, #1
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
    /**LPUART1 GPIO Configuration    
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000846:	230c      	movs	r3, #12
 8000848:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084a:	2302      	movs	r3, #2
 800084c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000856:	230c      	movs	r3, #12
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000864:	f000 fa20 	bl	8000ca8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000868:	bf00      	nop
 800086a:	3728      	adds	r7, #40	; 0x28
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40008000 	.word	0x40008000
 8000874:	40021000 	.word	0x40021000

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr

08000886 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <HardFault_Handler+0x4>

0800088c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <MemManage_Handler+0x4>

08000892 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000896:	e7fe      	b.n	8000896 <BusFault_Handler+0x4>

08000898 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089c:	e7fe      	b.n	800089c <UsageFault_Handler+0x4>

0800089e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800089e:	b480      	push	{r7}
 80008a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr

080008ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b0:	bf00      	nop
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008be:	bf00      	nop
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 f89c 	bl	8000a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}

080008d4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80008d8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008dc:	f000 fb98 	bl	8001010 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008e8:	4b08      	ldr	r3, [pc, #32]	; (800090c <SystemInit+0x28>)
 80008ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008ee:	4a07      	ldr	r2, [pc, #28]	; (800090c <SystemInit+0x28>)
 80008f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <SystemInit+0x28>)
 80008fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008fe:	609a      	str	r2, [r3, #8]
#endif
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000912:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000914:	480d      	ldr	r0, [pc, #52]	; (800094c <LoopForever+0x6>)
  ldr r1, =_edata
 8000916:	490e      	ldr	r1, [pc, #56]	; (8000950 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000918:	4a0e      	ldr	r2, [pc, #56]	; (8000954 <LoopForever+0xe>)
  movs r3, #0
 800091a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800091c:	e002      	b.n	8000924 <LoopCopyDataInit>

0800091e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800091e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000922:	3304      	adds	r3, #4

08000924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000928:	d3f9      	bcc.n	800091e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092a:	4a0b      	ldr	r2, [pc, #44]	; (8000958 <LoopForever+0x12>)
  ldr r4, =_ebss
 800092c:	4c0b      	ldr	r4, [pc, #44]	; (800095c <LoopForever+0x16>)
  movs r3, #0
 800092e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000930:	e001      	b.n	8000936 <LoopFillZerobss>

08000932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000934:	3204      	adds	r2, #4

08000936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000938:	d3fb      	bcc.n	8000932 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800093a:	f7ff ffd3 	bl	80008e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800093e:	f003 f83f 	bl	80039c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000942:	f7ff fde9 	bl	8000518 <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   r0, =_estack
 8000948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000954:	08003a68 	.word	0x08003a68
  ldr r2, =_sbss
 8000958:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800095c:	200000b8 	.word	0x200000b8

08000960 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC1_2_IRQHandler>

08000962 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b082      	sub	sp, #8
 8000966:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000968:	2300      	movs	r3, #0
 800096a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096c:	2003      	movs	r0, #3
 800096e:	f000 f95b 	bl	8000c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000972:	2000      	movs	r0, #0
 8000974:	f000 f80e 	bl	8000994 <HAL_InitTick>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d002      	beq.n	8000984 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	71fb      	strb	r3, [r7, #7]
 8000982:	e001      	b.n	8000988 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000984:	f7ff ff12 	bl	80007ac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000988:	79fb      	ldrb	r3, [r7, #7]

}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <HAL_InitTick+0x68>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d022      	beq.n	80009ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <HAL_InitTick+0x6c>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b13      	ldr	r3, [pc, #76]	; (80009fc <HAL_InitTick+0x68>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80009b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009bc:	4618      	mov	r0, r3
 80009be:	f000 f966 	bl	8000c8e <HAL_SYSTICK_Config>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d10f      	bne.n	80009e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b0f      	cmp	r3, #15
 80009cc:	d809      	bhi.n	80009e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009ce:	2200      	movs	r2, #0
 80009d0:	6879      	ldr	r1, [r7, #4]
 80009d2:	f04f 30ff 	mov.w	r0, #4294967295
 80009d6:	f000 f932 	bl	8000c3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <HAL_InitTick+0x70>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	e007      	b.n	80009f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	e004      	b.n	80009f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
 80009ec:	e001      	b.n	80009f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009ee:	2301      	movs	r3, #1
 80009f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000008 	.word	0x20000008
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000004 	.word	0x20000004

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x20>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4413      	add	r3, r2
 8000a16:	4a03      	ldr	r2, [pc, #12]	; (8000a24 <HAL_IncTick+0x1c>)
 8000a18:	6013      	str	r3, [r2, #0]
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	200000b4 	.word	0x200000b4
 8000a28:	20000008 	.word	0x20000008

08000a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b03      	ldr	r3, [pc, #12]	; (8000a40 <HAL_GetTick+0x14>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	200000b4 	.word	0x200000b4

08000a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a4c:	f7ff ffee 	bl	8000a2c <HAL_GetTick>
 8000a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a5c:	d004      	beq.n	8000a68 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a5e:	4b09      	ldr	r3, [pc, #36]	; (8000a84 <HAL_Delay+0x40>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	68fa      	ldr	r2, [r7, #12]
 8000a64:	4413      	add	r3, r2
 8000a66:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a68:	bf00      	nop
 8000a6a:	f7ff ffdf 	bl	8000a2c <HAL_GetTick>
 8000a6e:	4602      	mov	r2, r0
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d8f7      	bhi.n	8000a6a <HAL_Delay+0x26>
  {
  }
}
 8000a7a:	bf00      	nop
 8000a7c:	3710      	adds	r7, #16
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000008 	.word	0x20000008

08000a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	f003 0307 	and.w	r3, r3, #7
 8000a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a98:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000a9a:	68db      	ldr	r3, [r3, #12]
 8000a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9e:	68ba      	ldr	r2, [r7, #8]
 8000aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aba:	4a04      	ldr	r2, [pc, #16]	; (8000acc <__NVIC_SetPriorityGrouping+0x44>)
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	60d3      	str	r3, [r2, #12]
}
 8000ac0:	bf00      	nop
 8000ac2:	3714      	adds	r7, #20
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	0a1b      	lsrs	r3, r3, #8
 8000ada:	f003 0307 	and.w	r3, r3, #7
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae6:	4770      	bx	lr
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	db0b      	blt.n	8000b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	f003 021f 	and.w	r2, r3, #31
 8000b04:	4907      	ldr	r1, [pc, #28]	; (8000b24 <__NVIC_EnableIRQ+0x38>)
 8000b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0a:	095b      	lsrs	r3, r3, #5
 8000b0c:	2001      	movs	r0, #1
 8000b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8000b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	e000e100 	.word	0xe000e100

08000b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	6039      	str	r1, [r7, #0]
 8000b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	db0a      	blt.n	8000b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	b2da      	uxtb	r2, r3
 8000b40:	490c      	ldr	r1, [pc, #48]	; (8000b74 <__NVIC_SetPriority+0x4c>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	0112      	lsls	r2, r2, #4
 8000b48:	b2d2      	uxtb	r2, r2
 8000b4a:	440b      	add	r3, r1
 8000b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b50:	e00a      	b.n	8000b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	b2da      	uxtb	r2, r3
 8000b56:	4908      	ldr	r1, [pc, #32]	; (8000b78 <__NVIC_SetPriority+0x50>)
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	f003 030f 	and.w	r3, r3, #15
 8000b5e:	3b04      	subs	r3, #4
 8000b60:	0112      	lsls	r2, r2, #4
 8000b62:	b2d2      	uxtb	r2, r2
 8000b64:	440b      	add	r3, r1
 8000b66:	761a      	strb	r2, [r3, #24]
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	e000e100 	.word	0xe000e100
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b089      	sub	sp, #36	; 0x24
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b90:	69fb      	ldr	r3, [r7, #28]
 8000b92:	f1c3 0307 	rsb	r3, r3, #7
 8000b96:	2b04      	cmp	r3, #4
 8000b98:	bf28      	it	cs
 8000b9a:	2304      	movcs	r3, #4
 8000b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9e:	69fb      	ldr	r3, [r7, #28]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	2b06      	cmp	r3, #6
 8000ba4:	d902      	bls.n	8000bac <NVIC_EncodePriority+0x30>
 8000ba6:	69fb      	ldr	r3, [r7, #28]
 8000ba8:	3b03      	subs	r3, #3
 8000baa:	e000      	b.n	8000bae <NVIC_EncodePriority+0x32>
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	43da      	mvns	r2, r3
 8000bbc:	68bb      	ldr	r3, [r7, #8]
 8000bbe:	401a      	ands	r2, r3
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc8:	697b      	ldr	r3, [r7, #20]
 8000bca:	fa01 f303 	lsl.w	r3, r1, r3
 8000bce:	43d9      	mvns	r1, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd4:	4313      	orrs	r3, r2
         );
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3724      	adds	r7, #36	; 0x24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
	...

08000be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	3b01      	subs	r3, #1
 8000bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bf4:	d301      	bcc.n	8000bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00f      	b.n	8000c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <SysTick_Config+0x40>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	3b01      	subs	r3, #1
 8000c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c02:	210f      	movs	r1, #15
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f7ff ff8e 	bl	8000b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <SysTick_Config+0x40>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c12:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <SysTick_Config+0x40>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c18:	2300      	movs	r3, #0
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	e000e010 	.word	0xe000e010

08000c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff29 	bl	8000a88 <__NVIC_SetPriorityGrouping>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b086      	sub	sp, #24
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	4603      	mov	r3, r0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	607a      	str	r2, [r7, #4]
 8000c4a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c4c:	f7ff ff40 	bl	8000ad0 <__NVIC_GetPriorityGrouping>
 8000c50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c52:	687a      	ldr	r2, [r7, #4]
 8000c54:	68b9      	ldr	r1, [r7, #8]
 8000c56:	6978      	ldr	r0, [r7, #20]
 8000c58:	f7ff ff90 	bl	8000b7c <NVIC_EncodePriority>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff5f 	bl	8000b28 <__NVIC_SetPriority>
}
 8000c6a:	bf00      	nop
 8000c6c:	3718      	adds	r7, #24
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	4603      	mov	r3, r0
 8000c7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff ff33 	bl	8000aec <__NVIC_EnableIRQ>
}
 8000c86:	bf00      	nop
 8000c88:	3708      	adds	r7, #8
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f7ff ffa4 	bl	8000be4 <SysTick_Config>
 8000c9c:	4603      	mov	r3, r0
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
	...

08000ca8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000cb6:	e15a      	b.n	8000f6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	f000 814c 	beq.w	8000f68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cd0:	683b      	ldr	r3, [r7, #0]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d00b      	beq.n	8000cf0 <HAL_GPIO_Init+0x48>
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d007      	beq.n	8000cf0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce4:	2b11      	cmp	r3, #17
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b12      	cmp	r3, #18
 8000cee:	d130      	bne.n	8000d52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	2203      	movs	r2, #3
 8000cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000d00:	43db      	mvns	r3, r3
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	4013      	ands	r3, r2
 8000d06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d26:	2201      	movs	r2, #1
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	43db      	mvns	r3, r3
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4013      	ands	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	091b      	lsrs	r3, r3, #4
 8000d3c:	f003 0201 	and.w	r2, r3, #1
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	fa02 f303 	lsl.w	r3, r2, r3
 8000d46:	693a      	ldr	r2, [r7, #16]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	68db      	ldr	r3, [r3, #12]
 8000d56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	689a      	ldr	r2, [r3, #8]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	693a      	ldr	r2, [r7, #16]
 8000d80:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	2b02      	cmp	r3, #2
 8000d88:	d003      	beq.n	8000d92 <HAL_GPIO_Init+0xea>
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b12      	cmp	r3, #18
 8000d90:	d123      	bne.n	8000dda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	08da      	lsrs	r2, r3, #3
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3208      	adds	r2, #8
 8000d9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	220f      	movs	r2, #15
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4013      	ands	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	691a      	ldr	r2, [r3, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	f003 0307 	and.w	r3, r3, #7
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	08da      	lsrs	r2, r3, #3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3208      	adds	r2, #8
 8000dd4:	6939      	ldr	r1, [r7, #16]
 8000dd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4013      	ands	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0203 	and.w	r2, r3, #3
 8000dfa:	697b      	ldr	r3, [r7, #20]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 80a6 	beq.w	8000f68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1c:	4b5b      	ldr	r3, [pc, #364]	; (8000f8c <HAL_GPIO_Init+0x2e4>)
 8000e1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e20:	4a5a      	ldr	r2, [pc, #360]	; (8000f8c <HAL_GPIO_Init+0x2e4>)
 8000e22:	f043 0301 	orr.w	r3, r3, #1
 8000e26:	6613      	str	r3, [r2, #96]	; 0x60
 8000e28:	4b58      	ldr	r3, [pc, #352]	; (8000f8c <HAL_GPIO_Init+0x2e4>)
 8000e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e34:	4a56      	ldr	r2, [pc, #344]	; (8000f90 <HAL_GPIO_Init+0x2e8>)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000e5e:	d01f      	beq.n	8000ea0 <HAL_GPIO_Init+0x1f8>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a4c      	ldr	r2, [pc, #304]	; (8000f94 <HAL_GPIO_Init+0x2ec>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d019      	beq.n	8000e9c <HAL_GPIO_Init+0x1f4>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a4b      	ldr	r2, [pc, #300]	; (8000f98 <HAL_GPIO_Init+0x2f0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d013      	beq.n	8000e98 <HAL_GPIO_Init+0x1f0>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a4a      	ldr	r2, [pc, #296]	; (8000f9c <HAL_GPIO_Init+0x2f4>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d00d      	beq.n	8000e94 <HAL_GPIO_Init+0x1ec>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a49      	ldr	r2, [pc, #292]	; (8000fa0 <HAL_GPIO_Init+0x2f8>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d007      	beq.n	8000e90 <HAL_GPIO_Init+0x1e8>
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	4a48      	ldr	r2, [pc, #288]	; (8000fa4 <HAL_GPIO_Init+0x2fc>)
 8000e84:	4293      	cmp	r3, r2
 8000e86:	d101      	bne.n	8000e8c <HAL_GPIO_Init+0x1e4>
 8000e88:	2305      	movs	r3, #5
 8000e8a:	e00a      	b.n	8000ea2 <HAL_GPIO_Init+0x1fa>
 8000e8c:	2306      	movs	r3, #6
 8000e8e:	e008      	b.n	8000ea2 <HAL_GPIO_Init+0x1fa>
 8000e90:	2304      	movs	r3, #4
 8000e92:	e006      	b.n	8000ea2 <HAL_GPIO_Init+0x1fa>
 8000e94:	2303      	movs	r3, #3
 8000e96:	e004      	b.n	8000ea2 <HAL_GPIO_Init+0x1fa>
 8000e98:	2302      	movs	r3, #2
 8000e9a:	e002      	b.n	8000ea2 <HAL_GPIO_Init+0x1fa>
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e000      	b.n	8000ea2 <HAL_GPIO_Init+0x1fa>
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	f002 0203 	and.w	r2, r2, #3
 8000ea8:	0092      	lsls	r2, r2, #2
 8000eaa:	4093      	lsls	r3, r2
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eb2:	4937      	ldr	r1, [pc, #220]	; (8000f90 <HAL_GPIO_Init+0x2e8>)
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	089b      	lsrs	r3, r3, #2
 8000eb8:	3302      	adds	r3, #2
 8000eba:	693a      	ldr	r2, [r7, #16]
 8000ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ec0:	4b39      	ldr	r3, [pc, #228]	; (8000fa8 <HAL_GPIO_Init+0x300>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ee4:	4a30      	ldr	r2, [pc, #192]	; (8000fa8 <HAL_GPIO_Init+0x300>)
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000eea:	4b2f      	ldr	r3, [pc, #188]	; (8000fa8 <HAL_GPIO_Init+0x300>)
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d003      	beq.n	8000f0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000f0e:	4a26      	ldr	r2, [pc, #152]	; (8000fa8 <HAL_GPIO_Init+0x300>)
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f14:	4b24      	ldr	r3, [pc, #144]	; (8000fa8 <HAL_GPIO_Init+0x300>)
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	43db      	mvns	r3, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d003      	beq.n	8000f38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000f30:	693a      	ldr	r2, [r7, #16]
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f38:	4a1b      	ldr	r2, [pc, #108]	; (8000fa8 <HAL_GPIO_Init+0x300>)
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	; (8000fa8 <HAL_GPIO_Init+0x300>)
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	43db      	mvns	r3, r3
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	685b      	ldr	r3, [r3, #4]
 8000f52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000f62:	4a11      	ldr	r2, [pc, #68]	; (8000fa8 <HAL_GPIO_Init+0x300>)
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	fa22 f303 	lsr.w	r3, r2, r3
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f47f ae9d 	bne.w	8000cb8 <HAL_GPIO_Init+0x10>
  }
}
 8000f7e:	bf00      	nop
 8000f80:	371c      	adds	r7, #28
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	40010000 	.word	0x40010000
 8000f94:	48000400 	.word	0x48000400
 8000f98:	48000800 	.word	0x48000800
 8000f9c:	48000c00 	.word	0x48000c00
 8000fa0:	48001000 	.word	0x48001000
 8000fa4:	48001400 	.word	0x48001400
 8000fa8:	40010400 	.word	0x40010400

08000fac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
 8000fb4:	460b      	mov	r3, r1
 8000fb6:	807b      	strh	r3, [r7, #2]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fbc:	787b      	ldrb	r3, [r7, #1]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000fc2:	887a      	ldrh	r2, [r7, #2]
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000fc8:	e002      	b.n	8000fd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000fca:	887a      	ldrh	r2, [r7, #2]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr

08000fdc <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	695a      	ldr	r2, [r3, #20]
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ff4:	887a      	ldrh	r2, [r7, #2]
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000ffa:	e002      	b.n	8001002 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ffc:	887a      	ldrh	r2, [r7, #2]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	619a      	str	r2, [r3, #24]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800101c:	695a      	ldr	r2, [r3, #20]
 800101e:	88fb      	ldrh	r3, [r7, #6]
 8001020:	4013      	ands	r3, r2
 8001022:	2b00      	cmp	r3, #0
 8001024:	d006      	beq.n	8001034 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	4618      	mov	r0, r3
 8001030:	f000 f806 	bl	8001040 <HAL_GPIO_EXTI_Callback>
  }
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	40010400 	.word	0x40010400

08001040 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d141      	bne.n	80010ea <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001066:	4b4b      	ldr	r3, [pc, #300]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800106e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001072:	d131      	bne.n	80010d8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001074:	4b47      	ldr	r3, [pc, #284]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800107a:	4a46      	ldr	r2, [pc, #280]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800107c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001084:	4b43      	ldr	r3, [pc, #268]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800108c:	4a41      	ldr	r2, [pc, #260]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800108e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001094:	4b40      	ldr	r3, [pc, #256]	; (8001198 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2232      	movs	r2, #50	; 0x32
 800109a:	fb02 f303 	mul.w	r3, r2, r3
 800109e:	4a3f      	ldr	r2, [pc, #252]	; (800119c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80010a0:	fba2 2303 	umull	r2, r3, r2, r3
 80010a4:	0c9b      	lsrs	r3, r3, #18
 80010a6:	3301      	adds	r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010aa:	e002      	b.n	80010b2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010b2:	4b38      	ldr	r3, [pc, #224]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010b4:	695b      	ldr	r3, [r3, #20]
 80010b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010be:	d102      	bne.n	80010c6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f2      	bne.n	80010ac <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80010c6:	4b33      	ldr	r3, [pc, #204]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010d2:	d158      	bne.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e057      	b.n	8001188 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010d8:	4b2e      	ldr	r3, [pc, #184]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010de:	4a2d      	ldr	r2, [pc, #180]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80010e8:	e04d      	b.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010f0:	d141      	bne.n	8001176 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010f2:	4b28      	ldr	r3, [pc, #160]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010fe:	d131      	bne.n	8001164 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001100:	4b24      	ldr	r3, [pc, #144]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001102:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001106:	4a23      	ldr	r2, [pc, #140]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001110:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001118:	4a1e      	ldr	r2, [pc, #120]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800111a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800111e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001120:	4b1d      	ldr	r3, [pc, #116]	; (8001198 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2232      	movs	r2, #50	; 0x32
 8001126:	fb02 f303 	mul.w	r3, r2, r3
 800112a:	4a1c      	ldr	r2, [pc, #112]	; (800119c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800112c:	fba2 2303 	umull	r2, r3, r2, r3
 8001130:	0c9b      	lsrs	r3, r3, #18
 8001132:	3301      	adds	r3, #1
 8001134:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001136:	e002      	b.n	800113e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	3b01      	subs	r3, #1
 800113c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800113e:	4b15      	ldr	r3, [pc, #84]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001146:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800114a:	d102      	bne.n	8001152 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1f2      	bne.n	8001138 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001154:	695b      	ldr	r3, [r3, #20]
 8001156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800115a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800115e:	d112      	bne.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001160:	2303      	movs	r3, #3
 8001162:	e011      	b.n	8001188 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001164:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800116a:	4a0a      	ldr	r2, [pc, #40]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800116c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001174:	e007      	b.n	8001186 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001176:	4b07      	ldr	r3, [pc, #28]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800117e:	4a05      	ldr	r2, [pc, #20]	; (8001194 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001184:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001186:	2300      	movs	r3, #0
}
 8001188:	4618      	mov	r0, r3
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr
 8001194:	40007000 	.word	0x40007000
 8001198:	20000000 	.word	0x20000000
 800119c:	431bde83 	.word	0x431bde83

080011a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b088      	sub	sp, #32
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e308      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d075      	beq.n	80012aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011be:	4ba3      	ldr	r3, [pc, #652]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 030c 	and.w	r3, r3, #12
 80011c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011c8:	4ba0      	ldr	r3, [pc, #640]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	f003 0303 	and.w	r3, r3, #3
 80011d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	2b0c      	cmp	r3, #12
 80011d6:	d102      	bne.n	80011de <HAL_RCC_OscConfig+0x3e>
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d002      	beq.n	80011e4 <HAL_RCC_OscConfig+0x44>
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	2b08      	cmp	r3, #8
 80011e2:	d10b      	bne.n	80011fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	4b99      	ldr	r3, [pc, #612]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d05b      	beq.n	80012a8 <HAL_RCC_OscConfig+0x108>
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d157      	bne.n	80012a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e2e3      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001204:	d106      	bne.n	8001214 <HAL_RCC_OscConfig+0x74>
 8001206:	4b91      	ldr	r3, [pc, #580]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a90      	ldr	r2, [pc, #576]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e01d      	b.n	8001250 <HAL_RCC_OscConfig+0xb0>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800121c:	d10c      	bne.n	8001238 <HAL_RCC_OscConfig+0x98>
 800121e:	4b8b      	ldr	r3, [pc, #556]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a8a      	ldr	r2, [pc, #552]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001224:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	4b88      	ldr	r3, [pc, #544]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a87      	ldr	r2, [pc, #540]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	6013      	str	r3, [r2, #0]
 8001236:	e00b      	b.n	8001250 <HAL_RCC_OscConfig+0xb0>
 8001238:	4b84      	ldr	r3, [pc, #528]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a83      	ldr	r2, [pc, #524]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800123e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b81      	ldr	r3, [pc, #516]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a80      	ldr	r2, [pc, #512]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800124a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800124e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d013      	beq.n	8001280 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001258:	f7ff fbe8 	bl	8000a2c <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fbe4 	bl	8000a2c <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	; 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e2a8      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001272:	4b76      	ldr	r3, [pc, #472]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d0f0      	beq.n	8001260 <HAL_RCC_OscConfig+0xc0>
 800127e:	e014      	b.n	80012aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001280:	f7ff fbd4 	bl	8000a2c <HAL_GetTick>
 8001284:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001286:	e008      	b.n	800129a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001288:	f7ff fbd0 	bl	8000a2c <HAL_GetTick>
 800128c:	4602      	mov	r2, r0
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	2b64      	cmp	r3, #100	; 0x64
 8001294:	d901      	bls.n	800129a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001296:	2303      	movs	r3, #3
 8001298:	e294      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800129a:	4b6c      	ldr	r3, [pc, #432]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d1f0      	bne.n	8001288 <HAL_RCC_OscConfig+0xe8>
 80012a6:	e000      	b.n	80012aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d075      	beq.n	80013a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b6:	4b65      	ldr	r3, [pc, #404]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 030c 	and.w	r3, r3, #12
 80012be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012c0:	4b62      	ldr	r3, [pc, #392]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80012c2:	68db      	ldr	r3, [r3, #12]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b0c      	cmp	r3, #12
 80012ce:	d102      	bne.n	80012d6 <HAL_RCC_OscConfig+0x136>
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b02      	cmp	r3, #2
 80012d4:	d002      	beq.n	80012dc <HAL_RCC_OscConfig+0x13c>
 80012d6:	69bb      	ldr	r3, [r7, #24]
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d11f      	bne.n	800131c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80012dc:	4b5b      	ldr	r3, [pc, #364]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d005      	beq.n	80012f4 <HAL_RCC_OscConfig+0x154>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e267      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f4:	4b55      	ldr	r3, [pc, #340]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	061b      	lsls	r3, r3, #24
 8001302:	4952      	ldr	r1, [pc, #328]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001308:	4b51      	ldr	r3, [pc, #324]	; (8001450 <HAL_RCC_OscConfig+0x2b0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fb41 	bl	8000994 <HAL_InitTick>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d043      	beq.n	80013a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e253      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d023      	beq.n	800136c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001324:	4b49      	ldr	r3, [pc, #292]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a48      	ldr	r2, [pc, #288]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800132a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff fb7c 	bl	8000a2c <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001338:	f7ff fb78 	bl	8000a2c <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e23c      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800134a:	4b40      	ldr	r3, [pc, #256]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001352:	2b00      	cmp	r3, #0
 8001354:	d0f0      	beq.n	8001338 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	061b      	lsls	r3, r3, #24
 8001364:	4939      	ldr	r1, [pc, #228]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
 800136a:	e01a      	b.n	80013a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800136c:	4b37      	ldr	r3, [pc, #220]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a36      	ldr	r2, [pc, #216]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001376:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001378:	f7ff fb58 	bl	8000a2c <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001380:	f7ff fb54 	bl	8000a2c <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b02      	cmp	r3, #2
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e218      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001392:	4b2e      	ldr	r3, [pc, #184]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x1e0>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d03c      	beq.n	8001428 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d01c      	beq.n	80013f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013b6:	4b25      	ldr	r3, [pc, #148]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80013b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013bc:	4a23      	ldr	r2, [pc, #140]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013c6:	f7ff fb31 	bl	8000a2c <HAL_GetTick>
 80013ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013cc:	e008      	b.n	80013e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ce:	f7ff fb2d 	bl	8000a2c <HAL_GetTick>
 80013d2:	4602      	mov	r2, r0
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	1ad3      	subs	r3, r2, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d901      	bls.n	80013e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013dc:	2303      	movs	r3, #3
 80013de:	e1f1      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80013e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0ef      	beq.n	80013ce <HAL_RCC_OscConfig+0x22e>
 80013ee:	e01b      	b.n	8001428 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80013f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013f6:	4a15      	ldr	r2, [pc, #84]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001400:	f7ff fb14 	bl	8000a2c <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001408:	f7ff fb10 	bl	8000a2c <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b02      	cmp	r3, #2
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e1d4      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800141a:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800141c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1ef      	bne.n	8001408 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0304 	and.w	r3, r3, #4
 8001430:	2b00      	cmp	r3, #0
 8001432:	f000 80ab 	beq.w	800158c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001436:	2300      	movs	r3, #0
 8001438:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800143a:	4b04      	ldr	r3, [pc, #16]	; (800144c <HAL_RCC_OscConfig+0x2ac>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d106      	bne.n	8001454 <HAL_RCC_OscConfig+0x2b4>
 8001446:	2301      	movs	r3, #1
 8001448:	e005      	b.n	8001456 <HAL_RCC_OscConfig+0x2b6>
 800144a:	bf00      	nop
 800144c:	40021000 	.word	0x40021000
 8001450:	20000004 	.word	0x20000004
 8001454:	2300      	movs	r3, #0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d00d      	beq.n	8001476 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	4baf      	ldr	r3, [pc, #700]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 800145c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800145e:	4aae      	ldr	r2, [pc, #696]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6593      	str	r3, [r2, #88]	; 0x58
 8001466:	4bac      	ldr	r3, [pc, #688]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 8001468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001472:	2301      	movs	r3, #1
 8001474:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001476:	4ba9      	ldr	r3, [pc, #676]	; (800171c <HAL_RCC_OscConfig+0x57c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147e:	2b00      	cmp	r3, #0
 8001480:	d118      	bne.n	80014b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001482:	4ba6      	ldr	r3, [pc, #664]	; (800171c <HAL_RCC_OscConfig+0x57c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4aa5      	ldr	r2, [pc, #660]	; (800171c <HAL_RCC_OscConfig+0x57c>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148e:	f7ff facd 	bl	8000a2c <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001496:	f7ff fac9 	bl	8000a2c <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e18d      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a8:	4b9c      	ldr	r3, [pc, #624]	; (800171c <HAL_RCC_OscConfig+0x57c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	689b      	ldr	r3, [r3, #8]
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d108      	bne.n	80014ce <HAL_RCC_OscConfig+0x32e>
 80014bc:	4b96      	ldr	r3, [pc, #600]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80014be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c2:	4a95      	ldr	r2, [pc, #596]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014cc:	e024      	b.n	8001518 <HAL_RCC_OscConfig+0x378>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	2b05      	cmp	r3, #5
 80014d4:	d110      	bne.n	80014f8 <HAL_RCC_OscConfig+0x358>
 80014d6:	4b90      	ldr	r3, [pc, #576]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80014d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014dc:	4a8e      	ldr	r2, [pc, #568]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80014de:	f043 0304 	orr.w	r3, r3, #4
 80014e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014e6:	4b8c      	ldr	r3, [pc, #560]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80014e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ec:	4a8a      	ldr	r2, [pc, #552]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014f6:	e00f      	b.n	8001518 <HAL_RCC_OscConfig+0x378>
 80014f8:	4b87      	ldr	r3, [pc, #540]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80014fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014fe:	4a86      	ldr	r2, [pc, #536]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 8001500:	f023 0301 	bic.w	r3, r3, #1
 8001504:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001508:	4b83      	ldr	r3, [pc, #524]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 800150a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150e:	4a82      	ldr	r2, [pc, #520]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 8001510:	f023 0304 	bic.w	r3, r3, #4
 8001514:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d016      	beq.n	800154e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001520:	f7ff fa84 	bl	8000a2c <HAL_GetTick>
 8001524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001526:	e00a      	b.n	800153e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001528:	f7ff fa80 	bl	8000a2c <HAL_GetTick>
 800152c:	4602      	mov	r2, r0
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	1ad3      	subs	r3, r2, r3
 8001532:	f241 3288 	movw	r2, #5000	; 0x1388
 8001536:	4293      	cmp	r3, r2
 8001538:	d901      	bls.n	800153e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800153a:	2303      	movs	r3, #3
 800153c:	e142      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800153e:	4b76      	ldr	r3, [pc, #472]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 8001540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001544:	f003 0302 	and.w	r3, r3, #2
 8001548:	2b00      	cmp	r3, #0
 800154a:	d0ed      	beq.n	8001528 <HAL_RCC_OscConfig+0x388>
 800154c:	e015      	b.n	800157a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154e:	f7ff fa6d 	bl	8000a2c <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001554:	e00a      	b.n	800156c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001556:	f7ff fa69 	bl	8000a2c <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	f241 3288 	movw	r2, #5000	; 0x1388
 8001564:	4293      	cmp	r3, r2
 8001566:	d901      	bls.n	800156c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001568:	2303      	movs	r3, #3
 800156a:	e12b      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800156c:	4b6a      	ldr	r3, [pc, #424]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 800156e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d1ed      	bne.n	8001556 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800157a:	7ffb      	ldrb	r3, [r7, #31]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d105      	bne.n	800158c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001580:	4b65      	ldr	r3, [pc, #404]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 8001582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001584:	4a64      	ldr	r2, [pc, #400]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 8001586:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800158a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0320 	and.w	r3, r3, #32
 8001594:	2b00      	cmp	r3, #0
 8001596:	d03c      	beq.n	8001612 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d01c      	beq.n	80015da <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015a0:	4b5d      	ldr	r3, [pc, #372]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80015a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015a6:	4a5c      	ldr	r2, [pc, #368]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b0:	f7ff fa3c 	bl	8000a2c <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015b8:	f7ff fa38 	bl	8000a2c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e0fc      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015ca:	4b53      	ldr	r3, [pc, #332]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80015cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d0ef      	beq.n	80015b8 <HAL_RCC_OscConfig+0x418>
 80015d8:	e01b      	b.n	8001612 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015da:	4b4f      	ldr	r3, [pc, #316]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80015dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015e0:	4a4d      	ldr	r2, [pc, #308]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80015e2:	f023 0301 	bic.w	r3, r3, #1
 80015e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015ea:	f7ff fa1f 	bl	8000a2c <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015f2:	f7ff fa1b 	bl	8000a2c <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e0df      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001604:	4b44      	ldr	r3, [pc, #272]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 8001606:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1ef      	bne.n	80015f2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69db      	ldr	r3, [r3, #28]
 8001616:	2b00      	cmp	r3, #0
 8001618:	f000 80d3 	beq.w	80017c2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800161c:	4b3e      	ldr	r3, [pc, #248]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f003 030c 	and.w	r3, r3, #12
 8001624:	2b0c      	cmp	r3, #12
 8001626:	f000 808d 	beq.w	8001744 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	2b02      	cmp	r3, #2
 8001630:	d15a      	bne.n	80016e8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001632:	4b39      	ldr	r3, [pc, #228]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a38      	ldr	r2, [pc, #224]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 8001638:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800163c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163e:	f7ff f9f5 	bl	8000a2c <HAL_GetTick>
 8001642:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001644:	e008      	b.n	8001658 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001646:	f7ff f9f1 	bl	8000a2c <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d901      	bls.n	8001658 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8001654:	2303      	movs	r3, #3
 8001656:	e0b5      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001658:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d1f0      	bne.n	8001646 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001664:	4b2c      	ldr	r3, [pc, #176]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 8001666:	68da      	ldr	r2, [r3, #12]
 8001668:	4b2d      	ldr	r3, [pc, #180]	; (8001720 <HAL_RCC_OscConfig+0x580>)
 800166a:	4013      	ands	r3, r2
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6a11      	ldr	r1, [r2, #32]
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001674:	3a01      	subs	r2, #1
 8001676:	0112      	lsls	r2, r2, #4
 8001678:	4311      	orrs	r1, r2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800167e:	0212      	lsls	r2, r2, #8
 8001680:	4311      	orrs	r1, r2
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001686:	0852      	lsrs	r2, r2, #1
 8001688:	3a01      	subs	r2, #1
 800168a:	0552      	lsls	r2, r2, #21
 800168c:	4311      	orrs	r1, r2
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001692:	0852      	lsrs	r2, r2, #1
 8001694:	3a01      	subs	r2, #1
 8001696:	0652      	lsls	r2, r2, #25
 8001698:	4311      	orrs	r1, r2
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800169e:	06d2      	lsls	r2, r2, #27
 80016a0:	430a      	orrs	r2, r1
 80016a2:	491d      	ldr	r1, [pc, #116]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80016a4:	4313      	orrs	r3, r2
 80016a6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a8:	4b1b      	ldr	r3, [pc, #108]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a1a      	ldr	r2, [pc, #104]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80016ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016b2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	4a17      	ldr	r2, [pc, #92]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80016ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016be:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c0:	f7ff f9b4 	bl	8000a2c <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016c6:	e008      	b.n	80016da <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016c8:	f7ff f9b0 	bl	8000a2c <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d901      	bls.n	80016da <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e074      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d0f0      	beq.n	80016c8 <HAL_RCC_OscConfig+0x528>
 80016e6:	e06c      	b.n	80017c2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80016ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016f2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	4a07      	ldr	r2, [pc, #28]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 80016fa:	f023 0303 	bic.w	r3, r3, #3
 80016fe:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <HAL_RCC_OscConfig+0x578>)
 8001706:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800170a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff f98c 	bl	8000a2c <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001716:	e00e      	b.n	8001736 <HAL_RCC_OscConfig+0x596>
 8001718:	40021000 	.word	0x40021000
 800171c:	40007000 	.word	0x40007000
 8001720:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff f982 	bl	8000a2c <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e046      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <HAL_RCC_OscConfig+0x62c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1f0      	bne.n	8001724 <HAL_RCC_OscConfig+0x584>
 8001742:	e03e      	b.n	80017c2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e039      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001750:	4b1e      	ldr	r3, [pc, #120]	; (80017cc <HAL_RCC_OscConfig+0x62c>)
 8001752:	68db      	ldr	r3, [r3, #12]
 8001754:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	f003 0203 	and.w	r2, r3, #3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	429a      	cmp	r2, r3
 8001762:	d12c      	bne.n	80017be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	3b01      	subs	r3, #1
 8001770:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	429a      	cmp	r2, r3
 8001774:	d123      	bne.n	80017be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001780:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d11b      	bne.n	80017be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001790:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001792:	429a      	cmp	r2, r3
 8001794:	d113      	bne.n	80017be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	085b      	lsrs	r3, r3, #1
 80017a2:	3b01      	subs	r3, #1
 80017a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d109      	bne.n	80017be <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	3b01      	subs	r3, #1
 80017b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d001      	beq.n	80017c2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80017c2:	2300      	movs	r3, #0
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3720      	adds	r7, #32
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000

080017d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b086      	sub	sp, #24
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e11e      	b.n	8001a26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017e8:	4b91      	ldr	r3, [pc, #580]	; (8001a30 <HAL_RCC_ClockConfig+0x260>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 030f 	and.w	r3, r3, #15
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	d910      	bls.n	8001818 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f6:	4b8e      	ldr	r3, [pc, #568]	; (8001a30 <HAL_RCC_ClockConfig+0x260>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f023 020f 	bic.w	r2, r3, #15
 80017fe:	498c      	ldr	r1, [pc, #560]	; (8001a30 <HAL_RCC_ClockConfig+0x260>)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	4313      	orrs	r3, r2
 8001804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001806:	4b8a      	ldr	r3, [pc, #552]	; (8001a30 <HAL_RCC_ClockConfig+0x260>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 030f 	and.w	r3, r3, #15
 800180e:	683a      	ldr	r2, [r7, #0]
 8001810:	429a      	cmp	r2, r3
 8001812:	d001      	beq.n	8001818 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e106      	b.n	8001a26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d073      	beq.n	800190c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b03      	cmp	r3, #3
 800182a:	d129      	bne.n	8001880 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800182c:	4b81      	ldr	r3, [pc, #516]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0f4      	b.n	8001a26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800183c:	f000 f99e 	bl	8001b7c <RCC_GetSysClockFreqFromPLLSource>
 8001840:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	4a7c      	ldr	r2, [pc, #496]	; (8001a38 <HAL_RCC_ClockConfig+0x268>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d93f      	bls.n	80018ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800184a:	4b7a      	ldr	r3, [pc, #488]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800185e:	2b00      	cmp	r3, #0
 8001860:	d033      	beq.n	80018ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001866:	2b00      	cmp	r3, #0
 8001868:	d12f      	bne.n	80018ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800186a:	4b72      	ldr	r3, [pc, #456]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001872:	4a70      	ldr	r2, [pc, #448]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 8001874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001878:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e024      	b.n	80018ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	2b02      	cmp	r3, #2
 8001886:	d107      	bne.n	8001898 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001888:	4b6a      	ldr	r3, [pc, #424]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d109      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e0c6      	b.n	8001a26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001898:	4b66      	ldr	r3, [pc, #408]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e0be      	b.n	8001a26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80018a8:	f000 f8ce 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 80018ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4a61      	ldr	r2, [pc, #388]	; (8001a38 <HAL_RCC_ClockConfig+0x268>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d909      	bls.n	80018ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80018b6:	4b5f      	ldr	r3, [pc, #380]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018be:	4a5d      	ldr	r2, [pc, #372]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80018c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ca:	4b5a      	ldr	r3, [pc, #360]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f023 0203 	bic.w	r2, r3, #3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	4957      	ldr	r1, [pc, #348]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80018d8:	4313      	orrs	r3, r2
 80018da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018dc:	f7ff f8a6 	bl	8000a2c <HAL_GetTick>
 80018e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e4:	f7ff f8a2 	bl	8000a2c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e095      	b.n	8001a26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fa:	4b4e      	ldr	r3, [pc, #312]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 020c 	and.w	r2, r3, #12
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	429a      	cmp	r2, r3
 800190a:	d1eb      	bne.n	80018e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0302 	and.w	r3, r3, #2
 8001914:	2b00      	cmp	r3, #0
 8001916:	d023      	beq.n	8001960 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d005      	beq.n	8001930 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001924:	4b43      	ldr	r3, [pc, #268]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	4a42      	ldr	r2, [pc, #264]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800192a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800192e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d007      	beq.n	800194c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800193c:	4b3d      	ldr	r3, [pc, #244]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001944:	4a3b      	ldr	r2, [pc, #236]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 8001946:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800194a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b39      	ldr	r3, [pc, #228]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	4936      	ldr	r1, [pc, #216]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
 800195e:	e008      	b.n	8001972 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	2b80      	cmp	r3, #128	; 0x80
 8001964:	d105      	bne.n	8001972 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001966:	4b33      	ldr	r3, [pc, #204]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	4a32      	ldr	r2, [pc, #200]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 800196c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001970:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001972:	4b2f      	ldr	r3, [pc, #188]	; (8001a30 <HAL_RCC_ClockConfig+0x260>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 030f 	and.w	r3, r3, #15
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d21d      	bcs.n	80019bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001980:	4b2b      	ldr	r3, [pc, #172]	; (8001a30 <HAL_RCC_ClockConfig+0x260>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 020f 	bic.w	r2, r3, #15
 8001988:	4929      	ldr	r1, [pc, #164]	; (8001a30 <HAL_RCC_ClockConfig+0x260>)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001990:	f7ff f84c 	bl	8000a2c <HAL_GetTick>
 8001994:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001996:	e00a      	b.n	80019ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001998:	f7ff f848 	bl	8000a2c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e03b      	b.n	8001a26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_RCC_ClockConfig+0x260>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d1ed      	bne.n	8001998 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0304 	and.w	r3, r3, #4
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d008      	beq.n	80019da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c8:	4b1a      	ldr	r3, [pc, #104]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	4917      	ldr	r1, [pc, #92]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0308 	and.w	r3, r3, #8
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d009      	beq.n	80019fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e6:	4b13      	ldr	r3, [pc, #76]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	691b      	ldr	r3, [r3, #16]
 80019f2:	00db      	lsls	r3, r3, #3
 80019f4:	490f      	ldr	r1, [pc, #60]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019fa:	f000 f825 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 80019fe:	4601      	mov	r1, r0
 8001a00:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_RCC_ClockConfig+0x264>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	091b      	lsrs	r3, r3, #4
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	4a0c      	ldr	r2, [pc, #48]	; (8001a3c <HAL_RCC_ClockConfig+0x26c>)
 8001a0c:	5cd3      	ldrb	r3, [r2, r3]
 8001a0e:	f003 031f 	and.w	r3, r3, #31
 8001a12:	fa21 f303 	lsr.w	r3, r1, r3
 8001a16:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <HAL_RCC_ClockConfig+0x270>)
 8001a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001a1a:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <HAL_RCC_ClockConfig+0x274>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe ffb8 	bl	8000994 <HAL_InitTick>
 8001a24:	4603      	mov	r3, r0
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40022000 	.word	0x40022000
 8001a34:	40021000 	.word	0x40021000
 8001a38:	04c4b400 	.word	0x04c4b400
 8001a3c:	08003a40 	.word	0x08003a40
 8001a40:	20000000 	.word	0x20000000
 8001a44:	20000004 	.word	0x20000004

08001a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b087      	sub	sp, #28
 8001a4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	f003 030c 	and.w	r3, r3, #12
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d102      	bne.n	8001a60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a5a:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001a5c:	613b      	str	r3, [r7, #16]
 8001a5e:	e047      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 030c 	and.w	r3, r3, #12
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d102      	bne.n	8001a72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a6c:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	e03e      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001a72:	4b23      	ldr	r3, [pc, #140]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	f003 030c 	and.w	r3, r3, #12
 8001a7a:	2b0c      	cmp	r3, #12
 8001a7c:	d136      	bne.n	8001aec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 0303 	and.w	r3, r3, #3
 8001a86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001a88:	4b1d      	ldr	r3, [pc, #116]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 030f 	and.w	r3, r3, #15
 8001a92:	3301      	adds	r3, #1
 8001a94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d10c      	bne.n	8001ab6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001a9c:	4a1a      	ldr	r2, [pc, #104]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aa4:	4a16      	ldr	r2, [pc, #88]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001aa6:	68d2      	ldr	r2, [r2, #12]
 8001aa8:	0a12      	lsrs	r2, r2, #8
 8001aaa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001aae:	fb02 f303 	mul.w	r3, r2, r3
 8001ab2:	617b      	str	r3, [r7, #20]
      break;
 8001ab4:	e00c      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ab6:	4a13      	ldr	r2, [pc, #76]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001abe:	4a10      	ldr	r2, [pc, #64]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ac0:	68d2      	ldr	r2, [r2, #12]
 8001ac2:	0a12      	lsrs	r2, r2, #8
 8001ac4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001ac8:	fb02 f303 	mul.w	r3, r2, r3
 8001acc:	617b      	str	r3, [r7, #20]
      break;
 8001ace:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	0e5b      	lsrs	r3, r3, #25
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	3301      	adds	r3, #1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	e001      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001af0:	693b      	ldr	r3, [r7, #16]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	371c      	adds	r7, #28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	016e3600 	.word	0x016e3600

08001b0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b28:	f7ff fff0 	bl	8001b0c <HAL_RCC_GetHCLKFreq>
 8001b2c:	4601      	mov	r1, r0
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	0a1b      	lsrs	r3, r3, #8
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4a04      	ldr	r2, [pc, #16]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b3a:	5cd3      	ldrb	r3, [r2, r3]
 8001b3c:	f003 031f 	and.w	r3, r3, #31
 8001b40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	08003a50 	.word	0x08003a50

08001b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b54:	f7ff ffda 	bl	8001b0c <HAL_RCC_GetHCLKFreq>
 8001b58:	4601      	mov	r1, r0
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0adb      	lsrs	r3, r3, #11
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b66:	5cd3      	ldrb	r3, [r2, r3]
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	08003a50 	.word	0x08003a50

08001b7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b087      	sub	sp, #28
 8001b80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	f003 0303 	and.w	r3, r3, #3
 8001b8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001b8c:	4b1b      	ldr	r3, [pc, #108]	; (8001bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 030f 	and.w	r3, r3, #15
 8001b96:	3301      	adds	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d10c      	bne.n	8001bba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ba0:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba8:	4a14      	ldr	r2, [pc, #80]	; (8001bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001baa:	68d2      	ldr	r2, [r2, #12]
 8001bac:	0a12      	lsrs	r2, r2, #8
 8001bae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bb2:	fb02 f303 	mul.w	r3, r2, r3
 8001bb6:	617b      	str	r3, [r7, #20]
    break;
 8001bb8:	e00c      	b.n	8001bd4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bba:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bc4:	68d2      	ldr	r2, [r2, #12]
 8001bc6:	0a12      	lsrs	r2, r2, #8
 8001bc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bcc:	fb02 f303 	mul.w	r3, r2, r3
 8001bd0:	617b      	str	r3, [r7, #20]
    break;
 8001bd2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	0e5b      	lsrs	r3, r3, #25
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	3301      	adds	r3, #1
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001bee:	687b      	ldr	r3, [r7, #4]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	371c      	adds	r7, #28
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	016e3600 	.word	0x016e3600
 8001c04:	00f42400 	.word	0x00f42400

08001c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001c10:	2300      	movs	r3, #0
 8001c12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001c14:	2300      	movs	r3, #0
 8001c16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f000 8098 	beq.w	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c26:	2300      	movs	r3, #0
 8001c28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c2a:	4b43      	ldr	r3, [pc, #268]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d10d      	bne.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c36:	4b40      	ldr	r3, [pc, #256]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3a:	4a3f      	ldr	r2, [pc, #252]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c40:	6593      	str	r3, [r2, #88]	; 0x58
 8001c42:	4b3d      	ldr	r3, [pc, #244]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c4a:	60bb      	str	r3, [r7, #8]
 8001c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c52:	4b3a      	ldr	r3, [pc, #232]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a39      	ldr	r2, [pc, #228]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001c5e:	f7fe fee5 	bl	8000a2c <HAL_GetTick>
 8001c62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c64:	e009      	b.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c66:	f7fe fee1 	bl	8000a2c <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d902      	bls.n	8001c7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	74fb      	strb	r3, [r7, #19]
        break;
 8001c78:	e005      	b.n	8001c86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001c7a:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0ef      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001c86:	7cfb      	ldrb	r3, [r7, #19]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d159      	bne.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001c8c:	4b2a      	ldr	r3, [pc, #168]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d01e      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d019      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001ca8:	4b23      	ldr	r3, [pc, #140]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cb4:	4b20      	ldr	r3, [pc, #128]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cba:	4a1f      	ldr	r2, [pc, #124]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc4:	4b1c      	ldr	r3, [pc, #112]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cca:	4a1b      	ldr	r2, [pc, #108]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ccc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001cd4:	4a18      	ldr	r2, [pc, #96]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d016      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce6:	f7fe fea1 	bl	8000a2c <HAL_GetTick>
 8001cea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cec:	e00b      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cee:	f7fe fe9d 	bl	8000a2c <HAL_GetTick>
 8001cf2:	4602      	mov	r2, r0
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d902      	bls.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	74fb      	strb	r3, [r7, #19]
            break;
 8001d04:	e006      	b.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d06:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d0ec      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001d14:	7cfb      	ldrb	r3, [r7, #19]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10b      	bne.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d1a:	4b07      	ldr	r3, [pc, #28]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d20:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d28:	4903      	ldr	r1, [pc, #12]	; (8001d38 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001d30:	e008      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001d32:	7cfb      	ldrb	r3, [r7, #19]
 8001d34:	74bb      	strb	r3, [r7, #18]
 8001d36:	e005      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d40:	7cfb      	ldrb	r3, [r7, #19]
 8001d42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d44:	7c7b      	ldrb	r3, [r7, #17]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d105      	bne.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4a:	4baf      	ldr	r3, [pc, #700]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	4aae      	ldr	r2, [pc, #696]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d54:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 0301 	and.w	r3, r3, #1
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d00a      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d62:	4ba9      	ldr	r3, [pc, #676]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d68:	f023 0203 	bic.w	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	49a5      	ldr	r1, [pc, #660]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0302 	and.w	r3, r3, #2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d00a      	beq.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d84:	4ba0      	ldr	r3, [pc, #640]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d8a:	f023 020c 	bic.w	r2, r3, #12
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	499d      	ldr	r1, [pc, #628]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001d94:	4313      	orrs	r3, r2
 8001d96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 0304 	and.w	r3, r3, #4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001da6:	4b98      	ldr	r3, [pc, #608]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	4994      	ldr	r1, [pc, #592]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0308 	and.w	r3, r3, #8
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00a      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001dc8:	4b8f      	ldr	r3, [pc, #572]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	498c      	ldr	r1, [pc, #560]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d00a      	beq.n	8001e00 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001dea:	4b87      	ldr	r3, [pc, #540]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001df0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	695b      	ldr	r3, [r3, #20]
 8001df8:	4983      	ldr	r1, [pc, #524]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0320 	and.w	r3, r3, #32
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00a      	beq.n	8001e22 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001e0c:	4b7e      	ldr	r3, [pc, #504]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e12:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	699b      	ldr	r3, [r3, #24]
 8001e1a:	497b      	ldr	r1, [pc, #492]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e2e:	4b76      	ldr	r3, [pc, #472]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	4972      	ldr	r1, [pc, #456]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00a      	beq.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e50:	4b6d      	ldr	r3, [pc, #436]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	496a      	ldr	r1, [pc, #424]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00a      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e72:	4b65      	ldr	r3, [pc, #404]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e80:	4961      	ldr	r1, [pc, #388]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d00a      	beq.n	8001eaa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e94:	4b5c      	ldr	r3, [pc, #368]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea2:	4959      	ldr	r1, [pc, #356]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d00a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001eb6:	4b54      	ldr	r3, [pc, #336]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ebc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec4:	4950      	ldr	r1, [pc, #320]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d015      	beq.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ed8:	4b4b      	ldr	r3, [pc, #300]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	4948      	ldr	r1, [pc, #288]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ef6:	d105      	bne.n	8001f04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001ef8:	4b43      	ldr	r3, [pc, #268]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	4a42      	ldr	r2, [pc, #264]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001efe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d015      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001f10:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1e:	493a      	ldr	r1, [pc, #232]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f2e:	d105      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f30:	4b35      	ldr	r3, [pc, #212]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	4a34      	ldr	r2, [pc, #208]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f3a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d015      	beq.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8001f48:	4b2f      	ldr	r3, [pc, #188]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f56:	492c      	ldr	r1, [pc, #176]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f66:	d105      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001f68:	4b27      	ldr	r3, [pc, #156]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	4a26      	ldr	r2, [pc, #152]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d015      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f80:	4b21      	ldr	r3, [pc, #132]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f8e:	491e      	ldr	r1, [pc, #120]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f9e:	d105      	bne.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a18      	ldr	r2, [pc, #96]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001faa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d015      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4910      	ldr	r1, [pc, #64]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fd6:	d105      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fd8:	4b0b      	ldr	r3, [pc, #44]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001fde:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fe2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d018      	beq.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8001ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4902      	ldr	r1, [pc, #8]	; (8002008 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8002000:	4313      	orrs	r3, r2
 8002002:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002006:	e001      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8002008:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002010:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002014:	d105      	bne.n	8002022 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002016:	4b21      	ldr	r3, [pc, #132]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	4a20      	ldr	r2, [pc, #128]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d015      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800202e:	4b1b      	ldr	r3, [pc, #108]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002034:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800203c:	4917      	ldr	r1, [pc, #92]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800203e:	4313      	orrs	r3, r2
 8002040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800204c:	d105      	bne.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800204e:	4b13      	ldr	r3, [pc, #76]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	4a12      	ldr	r2, [pc, #72]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002058:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d015      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002066:	4b0d      	ldr	r3, [pc, #52]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002068:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800206c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002074:	4909      	ldr	r1, [pc, #36]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002084:	d105      	bne.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800208c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002090:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002092:	7cbb      	ldrb	r3, [r7, #18]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000

080020a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e042      	b.n	8002138 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d106      	bne.n	80020ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f7fe fb95 	bl	80007f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2224      	movs	r2, #36	; 0x24
 80020ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f82c 	bl	8002140 <UART_SetConfig>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d101      	bne.n	80020f2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e022      	b.n	8002138 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d002      	beq.n	8002100 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f001 fa0e 	bl	800351c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	685a      	ldr	r2, [r3, #4]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800210e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	689a      	ldr	r2, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800211e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f042 0201 	orr.w	r2, r2, #1
 800212e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f001 fa95 	bl	8003660 <UART_CheckIdleState>
 8002136:	4603      	mov	r3, r0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002140:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002144:	b08a      	sub	sp, #40	; 0x28
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002152:	2300      	movs	r3, #0
 8002154:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689a      	ldr	r2, [r3, #8]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	695b      	ldr	r3, [r3, #20]
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4313      	orrs	r3, r2
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002174:	4313      	orrs	r3, r2
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	4baa      	ldr	r3, [pc, #680]	; (8002428 <UART_SetConfig+0x2e8>)
 8002180:	4013      	ands	r3, r2
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	6812      	ldr	r2, [r2, #0]
 8002186:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002188:	430b      	orrs	r3, r1
 800218a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	430a      	orrs	r2, r1
 80021a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a9f      	ldr	r2, [pc, #636]	; (800242c <UART_SetConfig+0x2ec>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d004      	beq.n	80021bc <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a1b      	ldr	r3, [r3, #32]
 80021b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b8:	4313      	orrs	r3, r2
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80021c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021d0:	430b      	orrs	r3, r1
 80021d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021da:	f023 010f 	bic.w	r1, r3, #15
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	430a      	orrs	r2, r1
 80021e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a90      	ldr	r2, [pc, #576]	; (8002430 <UART_SetConfig+0x2f0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d126      	bne.n	8002242 <UART_SetConfig+0x102>
 80021f4:	4b8f      	ldr	r3, [pc, #572]	; (8002434 <UART_SetConfig+0x2f4>)
 80021f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d81a      	bhi.n	8002238 <UART_SetConfig+0xf8>
 8002202:	a201      	add	r2, pc, #4	; (adr r2, 8002208 <UART_SetConfig+0xc8>)
 8002204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002208:	08002219 	.word	0x08002219
 800220c:	08002229 	.word	0x08002229
 8002210:	08002221 	.word	0x08002221
 8002214:	08002231 	.word	0x08002231
 8002218:	2301      	movs	r3, #1
 800221a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800221e:	e116      	b.n	800244e <UART_SetConfig+0x30e>
 8002220:	2302      	movs	r3, #2
 8002222:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002226:	e112      	b.n	800244e <UART_SetConfig+0x30e>
 8002228:	2304      	movs	r3, #4
 800222a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800222e:	e10e      	b.n	800244e <UART_SetConfig+0x30e>
 8002230:	2308      	movs	r3, #8
 8002232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002236:	e10a      	b.n	800244e <UART_SetConfig+0x30e>
 8002238:	2310      	movs	r3, #16
 800223a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800223e:	bf00      	nop
 8002240:	e105      	b.n	800244e <UART_SetConfig+0x30e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a7c      	ldr	r2, [pc, #496]	; (8002438 <UART_SetConfig+0x2f8>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d138      	bne.n	80022be <UART_SetConfig+0x17e>
 800224c:	4b79      	ldr	r3, [pc, #484]	; (8002434 <UART_SetConfig+0x2f4>)
 800224e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002252:	f003 030c 	and.w	r3, r3, #12
 8002256:	2b0c      	cmp	r3, #12
 8002258:	d82c      	bhi.n	80022b4 <UART_SetConfig+0x174>
 800225a:	a201      	add	r2, pc, #4	; (adr r2, 8002260 <UART_SetConfig+0x120>)
 800225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002260:	08002295 	.word	0x08002295
 8002264:	080022b5 	.word	0x080022b5
 8002268:	080022b5 	.word	0x080022b5
 800226c:	080022b5 	.word	0x080022b5
 8002270:	080022a5 	.word	0x080022a5
 8002274:	080022b5 	.word	0x080022b5
 8002278:	080022b5 	.word	0x080022b5
 800227c:	080022b5 	.word	0x080022b5
 8002280:	0800229d 	.word	0x0800229d
 8002284:	080022b5 	.word	0x080022b5
 8002288:	080022b5 	.word	0x080022b5
 800228c:	080022b5 	.word	0x080022b5
 8002290:	080022ad 	.word	0x080022ad
 8002294:	2300      	movs	r3, #0
 8002296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800229a:	e0d8      	b.n	800244e <UART_SetConfig+0x30e>
 800229c:	2302      	movs	r3, #2
 800229e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022a2:	e0d4      	b.n	800244e <UART_SetConfig+0x30e>
 80022a4:	2304      	movs	r3, #4
 80022a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022aa:	e0d0      	b.n	800244e <UART_SetConfig+0x30e>
 80022ac:	2308      	movs	r3, #8
 80022ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022b2:	e0cc      	b.n	800244e <UART_SetConfig+0x30e>
 80022b4:	2310      	movs	r3, #16
 80022b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022ba:	bf00      	nop
 80022bc:	e0c7      	b.n	800244e <UART_SetConfig+0x30e>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a5e      	ldr	r2, [pc, #376]	; (800243c <UART_SetConfig+0x2fc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d125      	bne.n	8002314 <UART_SetConfig+0x1d4>
 80022c8:	4b5a      	ldr	r3, [pc, #360]	; (8002434 <UART_SetConfig+0x2f4>)
 80022ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80022d2:	2b10      	cmp	r3, #16
 80022d4:	d011      	beq.n	80022fa <UART_SetConfig+0x1ba>
 80022d6:	2b10      	cmp	r3, #16
 80022d8:	d802      	bhi.n	80022e0 <UART_SetConfig+0x1a0>
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <UART_SetConfig+0x1aa>
 80022de:	e014      	b.n	800230a <UART_SetConfig+0x1ca>
 80022e0:	2b20      	cmp	r3, #32
 80022e2:	d006      	beq.n	80022f2 <UART_SetConfig+0x1b2>
 80022e4:	2b30      	cmp	r3, #48	; 0x30
 80022e6:	d00c      	beq.n	8002302 <UART_SetConfig+0x1c2>
 80022e8:	e00f      	b.n	800230a <UART_SetConfig+0x1ca>
 80022ea:	2300      	movs	r3, #0
 80022ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022f0:	e0ad      	b.n	800244e <UART_SetConfig+0x30e>
 80022f2:	2302      	movs	r3, #2
 80022f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80022f8:	e0a9      	b.n	800244e <UART_SetConfig+0x30e>
 80022fa:	2304      	movs	r3, #4
 80022fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002300:	e0a5      	b.n	800244e <UART_SetConfig+0x30e>
 8002302:	2308      	movs	r3, #8
 8002304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002308:	e0a1      	b.n	800244e <UART_SetConfig+0x30e>
 800230a:	2310      	movs	r3, #16
 800230c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002310:	bf00      	nop
 8002312:	e09c      	b.n	800244e <UART_SetConfig+0x30e>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a49      	ldr	r2, [pc, #292]	; (8002440 <UART_SetConfig+0x300>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d125      	bne.n	800236a <UART_SetConfig+0x22a>
 800231e:	4b45      	ldr	r3, [pc, #276]	; (8002434 <UART_SetConfig+0x2f4>)
 8002320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002324:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002328:	2b40      	cmp	r3, #64	; 0x40
 800232a:	d011      	beq.n	8002350 <UART_SetConfig+0x210>
 800232c:	2b40      	cmp	r3, #64	; 0x40
 800232e:	d802      	bhi.n	8002336 <UART_SetConfig+0x1f6>
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <UART_SetConfig+0x200>
 8002334:	e014      	b.n	8002360 <UART_SetConfig+0x220>
 8002336:	2b80      	cmp	r3, #128	; 0x80
 8002338:	d006      	beq.n	8002348 <UART_SetConfig+0x208>
 800233a:	2bc0      	cmp	r3, #192	; 0xc0
 800233c:	d00c      	beq.n	8002358 <UART_SetConfig+0x218>
 800233e:	e00f      	b.n	8002360 <UART_SetConfig+0x220>
 8002340:	2300      	movs	r3, #0
 8002342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002346:	e082      	b.n	800244e <UART_SetConfig+0x30e>
 8002348:	2302      	movs	r3, #2
 800234a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800234e:	e07e      	b.n	800244e <UART_SetConfig+0x30e>
 8002350:	2304      	movs	r3, #4
 8002352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002356:	e07a      	b.n	800244e <UART_SetConfig+0x30e>
 8002358:	2308      	movs	r3, #8
 800235a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800235e:	e076      	b.n	800244e <UART_SetConfig+0x30e>
 8002360:	2310      	movs	r3, #16
 8002362:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002366:	bf00      	nop
 8002368:	e071      	b.n	800244e <UART_SetConfig+0x30e>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a35      	ldr	r2, [pc, #212]	; (8002444 <UART_SetConfig+0x304>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d129      	bne.n	80023c8 <UART_SetConfig+0x288>
 8002374:	4b2f      	ldr	r3, [pc, #188]	; (8002434 <UART_SetConfig+0x2f4>)
 8002376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800237a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800237e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002382:	d014      	beq.n	80023ae <UART_SetConfig+0x26e>
 8002384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002388:	d802      	bhi.n	8002390 <UART_SetConfig+0x250>
 800238a:	2b00      	cmp	r3, #0
 800238c:	d007      	beq.n	800239e <UART_SetConfig+0x25e>
 800238e:	e016      	b.n	80023be <UART_SetConfig+0x27e>
 8002390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002394:	d007      	beq.n	80023a6 <UART_SetConfig+0x266>
 8002396:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800239a:	d00c      	beq.n	80023b6 <UART_SetConfig+0x276>
 800239c:	e00f      	b.n	80023be <UART_SetConfig+0x27e>
 800239e:	2300      	movs	r3, #0
 80023a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023a4:	e053      	b.n	800244e <UART_SetConfig+0x30e>
 80023a6:	2302      	movs	r3, #2
 80023a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023ac:	e04f      	b.n	800244e <UART_SetConfig+0x30e>
 80023ae:	2304      	movs	r3, #4
 80023b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023b4:	e04b      	b.n	800244e <UART_SetConfig+0x30e>
 80023b6:	2308      	movs	r3, #8
 80023b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023bc:	e047      	b.n	800244e <UART_SetConfig+0x30e>
 80023be:	2310      	movs	r3, #16
 80023c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80023c4:	bf00      	nop
 80023c6:	e042      	b.n	800244e <UART_SetConfig+0x30e>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a17      	ldr	r2, [pc, #92]	; (800242c <UART_SetConfig+0x2ec>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d13a      	bne.n	8002448 <UART_SetConfig+0x308>
 80023d2:	4b18      	ldr	r3, [pc, #96]	; (8002434 <UART_SetConfig+0x2f4>)
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80023dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e0:	d014      	beq.n	800240c <UART_SetConfig+0x2cc>
 80023e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e6:	d802      	bhi.n	80023ee <UART_SetConfig+0x2ae>
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <UART_SetConfig+0x2bc>
 80023ec:	e016      	b.n	800241c <UART_SetConfig+0x2dc>
 80023ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80023f2:	d007      	beq.n	8002404 <UART_SetConfig+0x2c4>
 80023f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80023f8:	d00c      	beq.n	8002414 <UART_SetConfig+0x2d4>
 80023fa:	e00f      	b.n	800241c <UART_SetConfig+0x2dc>
 80023fc:	2300      	movs	r3, #0
 80023fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002402:	e024      	b.n	800244e <UART_SetConfig+0x30e>
 8002404:	2302      	movs	r3, #2
 8002406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800240a:	e020      	b.n	800244e <UART_SetConfig+0x30e>
 800240c:	2304      	movs	r3, #4
 800240e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002412:	e01c      	b.n	800244e <UART_SetConfig+0x30e>
 8002414:	2308      	movs	r3, #8
 8002416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800241a:	e018      	b.n	800244e <UART_SetConfig+0x30e>
 800241c:	2310      	movs	r3, #16
 800241e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002422:	bf00      	nop
 8002424:	e013      	b.n	800244e <UART_SetConfig+0x30e>
 8002426:	bf00      	nop
 8002428:	cfff69f3 	.word	0xcfff69f3
 800242c:	40008000 	.word	0x40008000
 8002430:	40013800 	.word	0x40013800
 8002434:	40021000 	.word	0x40021000
 8002438:	40004400 	.word	0x40004400
 800243c:	40004800 	.word	0x40004800
 8002440:	40004c00 	.word	0x40004c00
 8002444:	40005000 	.word	0x40005000
 8002448:	2310      	movs	r3, #16
 800244a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a86      	ldr	r2, [pc, #536]	; (800266c <UART_SetConfig+0x52c>)
 8002454:	4293      	cmp	r3, r2
 8002456:	f040 8422 	bne.w	8002c9e <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800245a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800245e:	2b08      	cmp	r3, #8
 8002460:	f200 8173 	bhi.w	800274a <UART_SetConfig+0x60a>
 8002464:	a201      	add	r2, pc, #4	; (adr r2, 800246c <UART_SetConfig+0x32c>)
 8002466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800246a:	bf00      	nop
 800246c:	08002491 	.word	0x08002491
 8002470:	0800274b 	.word	0x0800274b
 8002474:	08002533 	.word	0x08002533
 8002478:	0800274b 	.word	0x0800274b
 800247c:	080025cb 	.word	0x080025cb
 8002480:	0800274b 	.word	0x0800274b
 8002484:	0800274b 	.word	0x0800274b
 8002488:	0800274b 	.word	0x0800274b
 800248c:	0800269d 	.word	0x0800269d
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002490:	f7ff fb48 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 8002494:	4602      	mov	r2, r0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	2b00      	cmp	r3, #0
 800249c:	d044      	beq.n	8002528 <UART_SetConfig+0x3e8>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d03e      	beq.n	8002524 <UART_SetConfig+0x3e4>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d038      	beq.n	8002520 <UART_SetConfig+0x3e0>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b2:	2b03      	cmp	r3, #3
 80024b4:	d032      	beq.n	800251c <UART_SetConfig+0x3dc>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d02c      	beq.n	8002518 <UART_SetConfig+0x3d8>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c2:	2b05      	cmp	r3, #5
 80024c4:	d026      	beq.n	8002514 <UART_SetConfig+0x3d4>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d020      	beq.n	8002510 <UART_SetConfig+0x3d0>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d2:	2b07      	cmp	r3, #7
 80024d4:	d01a      	beq.n	800250c <UART_SetConfig+0x3cc>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d014      	beq.n	8002508 <UART_SetConfig+0x3c8>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	2b09      	cmp	r3, #9
 80024e4:	d00e      	beq.n	8002504 <UART_SetConfig+0x3c4>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ea:	2b0a      	cmp	r3, #10
 80024ec:	d008      	beq.n	8002500 <UART_SetConfig+0x3c0>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f2:	2b0b      	cmp	r3, #11
 80024f4:	d102      	bne.n	80024fc <UART_SetConfig+0x3bc>
 80024f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024fa:	e016      	b.n	800252a <UART_SetConfig+0x3ea>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e014      	b.n	800252a <UART_SetConfig+0x3ea>
 8002500:	2380      	movs	r3, #128	; 0x80
 8002502:	e012      	b.n	800252a <UART_SetConfig+0x3ea>
 8002504:	2340      	movs	r3, #64	; 0x40
 8002506:	e010      	b.n	800252a <UART_SetConfig+0x3ea>
 8002508:	2320      	movs	r3, #32
 800250a:	e00e      	b.n	800252a <UART_SetConfig+0x3ea>
 800250c:	2310      	movs	r3, #16
 800250e:	e00c      	b.n	800252a <UART_SetConfig+0x3ea>
 8002510:	230c      	movs	r3, #12
 8002512:	e00a      	b.n	800252a <UART_SetConfig+0x3ea>
 8002514:	230a      	movs	r3, #10
 8002516:	e008      	b.n	800252a <UART_SetConfig+0x3ea>
 8002518:	2308      	movs	r3, #8
 800251a:	e006      	b.n	800252a <UART_SetConfig+0x3ea>
 800251c:	2306      	movs	r3, #6
 800251e:	e004      	b.n	800252a <UART_SetConfig+0x3ea>
 8002520:	2304      	movs	r3, #4
 8002522:	e002      	b.n	800252a <UART_SetConfig+0x3ea>
 8002524:	2302      	movs	r3, #2
 8002526:	e000      	b.n	800252a <UART_SetConfig+0x3ea>
 8002528:	2301      	movs	r3, #1
 800252a:	fbb2 f3f3 	udiv	r3, r2, r3
 800252e:	617b      	str	r3, [r7, #20]
        break;
 8002530:	e10e      	b.n	8002750 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002536:	2b00      	cmp	r3, #0
 8002538:	d044      	beq.n	80025c4 <UART_SetConfig+0x484>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	2b01      	cmp	r3, #1
 8002540:	d03e      	beq.n	80025c0 <UART_SetConfig+0x480>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002546:	2b02      	cmp	r3, #2
 8002548:	d038      	beq.n	80025bc <UART_SetConfig+0x47c>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	2b03      	cmp	r3, #3
 8002550:	d032      	beq.n	80025b8 <UART_SetConfig+0x478>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	2b04      	cmp	r3, #4
 8002558:	d02c      	beq.n	80025b4 <UART_SetConfig+0x474>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255e:	2b05      	cmp	r3, #5
 8002560:	d026      	beq.n	80025b0 <UART_SetConfig+0x470>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	2b06      	cmp	r3, #6
 8002568:	d020      	beq.n	80025ac <UART_SetConfig+0x46c>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256e:	2b07      	cmp	r3, #7
 8002570:	d01a      	beq.n	80025a8 <UART_SetConfig+0x468>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002576:	2b08      	cmp	r3, #8
 8002578:	d014      	beq.n	80025a4 <UART_SetConfig+0x464>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	2b09      	cmp	r3, #9
 8002580:	d00e      	beq.n	80025a0 <UART_SetConfig+0x460>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002586:	2b0a      	cmp	r3, #10
 8002588:	d008      	beq.n	800259c <UART_SetConfig+0x45c>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	2b0b      	cmp	r3, #11
 8002590:	d102      	bne.n	8002598 <UART_SetConfig+0x458>
 8002592:	f24f 4324 	movw	r3, #62500	; 0xf424
 8002596:	e016      	b.n	80025c6 <UART_SetConfig+0x486>
 8002598:	4b35      	ldr	r3, [pc, #212]	; (8002670 <UART_SetConfig+0x530>)
 800259a:	e014      	b.n	80025c6 <UART_SetConfig+0x486>
 800259c:	4b35      	ldr	r3, [pc, #212]	; (8002674 <UART_SetConfig+0x534>)
 800259e:	e012      	b.n	80025c6 <UART_SetConfig+0x486>
 80025a0:	4b35      	ldr	r3, [pc, #212]	; (8002678 <UART_SetConfig+0x538>)
 80025a2:	e010      	b.n	80025c6 <UART_SetConfig+0x486>
 80025a4:	4b35      	ldr	r3, [pc, #212]	; (800267c <UART_SetConfig+0x53c>)
 80025a6:	e00e      	b.n	80025c6 <UART_SetConfig+0x486>
 80025a8:	4b35      	ldr	r3, [pc, #212]	; (8002680 <UART_SetConfig+0x540>)
 80025aa:	e00c      	b.n	80025c6 <UART_SetConfig+0x486>
 80025ac:	4b35      	ldr	r3, [pc, #212]	; (8002684 <UART_SetConfig+0x544>)
 80025ae:	e00a      	b.n	80025c6 <UART_SetConfig+0x486>
 80025b0:	4b35      	ldr	r3, [pc, #212]	; (8002688 <UART_SetConfig+0x548>)
 80025b2:	e008      	b.n	80025c6 <UART_SetConfig+0x486>
 80025b4:	4b35      	ldr	r3, [pc, #212]	; (800268c <UART_SetConfig+0x54c>)
 80025b6:	e006      	b.n	80025c6 <UART_SetConfig+0x486>
 80025b8:	4b35      	ldr	r3, [pc, #212]	; (8002690 <UART_SetConfig+0x550>)
 80025ba:	e004      	b.n	80025c6 <UART_SetConfig+0x486>
 80025bc:	4b35      	ldr	r3, [pc, #212]	; (8002694 <UART_SetConfig+0x554>)
 80025be:	e002      	b.n	80025c6 <UART_SetConfig+0x486>
 80025c0:	4b35      	ldr	r3, [pc, #212]	; (8002698 <UART_SetConfig+0x558>)
 80025c2:	e000      	b.n	80025c6 <UART_SetConfig+0x486>
 80025c4:	4b2a      	ldr	r3, [pc, #168]	; (8002670 <UART_SetConfig+0x530>)
 80025c6:	617b      	str	r3, [r7, #20]
        break;
 80025c8:	e0c2      	b.n	8002750 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80025ca:	f7ff fa3d 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 80025ce:	4602      	mov	r2, r0
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d044      	beq.n	8002662 <UART_SetConfig+0x522>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d03e      	beq.n	800265e <UART_SetConfig+0x51e>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d038      	beq.n	800265a <UART_SetConfig+0x51a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d032      	beq.n	8002656 <UART_SetConfig+0x516>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d02c      	beq.n	8002652 <UART_SetConfig+0x512>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d026      	beq.n	800264e <UART_SetConfig+0x50e>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	2b06      	cmp	r3, #6
 8002606:	d020      	beq.n	800264a <UART_SetConfig+0x50a>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260c:	2b07      	cmp	r3, #7
 800260e:	d01a      	beq.n	8002646 <UART_SetConfig+0x506>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	2b08      	cmp	r3, #8
 8002616:	d014      	beq.n	8002642 <UART_SetConfig+0x502>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261c:	2b09      	cmp	r3, #9
 800261e:	d00e      	beq.n	800263e <UART_SetConfig+0x4fe>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002624:	2b0a      	cmp	r3, #10
 8002626:	d008      	beq.n	800263a <UART_SetConfig+0x4fa>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	2b0b      	cmp	r3, #11
 800262e:	d102      	bne.n	8002636 <UART_SetConfig+0x4f6>
 8002630:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002634:	e016      	b.n	8002664 <UART_SetConfig+0x524>
 8002636:	2301      	movs	r3, #1
 8002638:	e014      	b.n	8002664 <UART_SetConfig+0x524>
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	e012      	b.n	8002664 <UART_SetConfig+0x524>
 800263e:	2340      	movs	r3, #64	; 0x40
 8002640:	e010      	b.n	8002664 <UART_SetConfig+0x524>
 8002642:	2320      	movs	r3, #32
 8002644:	e00e      	b.n	8002664 <UART_SetConfig+0x524>
 8002646:	2310      	movs	r3, #16
 8002648:	e00c      	b.n	8002664 <UART_SetConfig+0x524>
 800264a:	230c      	movs	r3, #12
 800264c:	e00a      	b.n	8002664 <UART_SetConfig+0x524>
 800264e:	230a      	movs	r3, #10
 8002650:	e008      	b.n	8002664 <UART_SetConfig+0x524>
 8002652:	2308      	movs	r3, #8
 8002654:	e006      	b.n	8002664 <UART_SetConfig+0x524>
 8002656:	2306      	movs	r3, #6
 8002658:	e004      	b.n	8002664 <UART_SetConfig+0x524>
 800265a:	2304      	movs	r3, #4
 800265c:	e002      	b.n	8002664 <UART_SetConfig+0x524>
 800265e:	2302      	movs	r3, #2
 8002660:	e000      	b.n	8002664 <UART_SetConfig+0x524>
 8002662:	2301      	movs	r3, #1
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
        break;
 800266a:	e071      	b.n	8002750 <UART_SetConfig+0x610>
 800266c:	40008000 	.word	0x40008000
 8002670:	00f42400 	.word	0x00f42400
 8002674:	0001e848 	.word	0x0001e848
 8002678:	0003d090 	.word	0x0003d090
 800267c:	0007a120 	.word	0x0007a120
 8002680:	000f4240 	.word	0x000f4240
 8002684:	00145855 	.word	0x00145855
 8002688:	00186a00 	.word	0x00186a00
 800268c:	001e8480 	.word	0x001e8480
 8002690:	0028b0aa 	.word	0x0028b0aa
 8002694:	003d0900 	.word	0x003d0900
 8002698:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d04e      	beq.n	8002742 <UART_SetConfig+0x602>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d047      	beq.n	800273c <UART_SetConfig+0x5fc>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d040      	beq.n	8002736 <UART_SetConfig+0x5f6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d039      	beq.n	8002730 <UART_SetConfig+0x5f0>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d032      	beq.n	800272a <UART_SetConfig+0x5ea>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d02b      	beq.n	8002724 <UART_SetConfig+0x5e4>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d0:	2b06      	cmp	r3, #6
 80026d2:	d024      	beq.n	800271e <UART_SetConfig+0x5de>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	2b07      	cmp	r3, #7
 80026da:	d01d      	beq.n	8002718 <UART_SetConfig+0x5d8>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d016      	beq.n	8002712 <UART_SetConfig+0x5d2>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e8:	2b09      	cmp	r3, #9
 80026ea:	d00f      	beq.n	800270c <UART_SetConfig+0x5cc>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f0:	2b0a      	cmp	r3, #10
 80026f2:	d008      	beq.n	8002706 <UART_SetConfig+0x5c6>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f8:	2b0b      	cmp	r3, #11
 80026fa:	d101      	bne.n	8002700 <UART_SetConfig+0x5c0>
 80026fc:	2380      	movs	r3, #128	; 0x80
 80026fe:	e022      	b.n	8002746 <UART_SetConfig+0x606>
 8002700:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002704:	e01f      	b.n	8002746 <UART_SetConfig+0x606>
 8002706:	f44f 7380 	mov.w	r3, #256	; 0x100
 800270a:	e01c      	b.n	8002746 <UART_SetConfig+0x606>
 800270c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002710:	e019      	b.n	8002746 <UART_SetConfig+0x606>
 8002712:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002716:	e016      	b.n	8002746 <UART_SetConfig+0x606>
 8002718:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800271c:	e013      	b.n	8002746 <UART_SetConfig+0x606>
 800271e:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8002722:	e010      	b.n	8002746 <UART_SetConfig+0x606>
 8002724:	f640 43cc 	movw	r3, #3276	; 0xccc
 8002728:	e00d      	b.n	8002746 <UART_SetConfig+0x606>
 800272a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800272e:	e00a      	b.n	8002746 <UART_SetConfig+0x606>
 8002730:	f241 5355 	movw	r3, #5461	; 0x1555
 8002734:	e007      	b.n	8002746 <UART_SetConfig+0x606>
 8002736:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800273a:	e004      	b.n	8002746 <UART_SetConfig+0x606>
 800273c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002740:	e001      	b.n	8002746 <UART_SetConfig+0x606>
 8002742:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002746:	617b      	str	r3, [r7, #20]
        break;
 8002748:	e002      	b.n	8002750 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	76fb      	strb	r3, [r7, #27]
        break;
 800274e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 86b7 	beq.w	80034c6 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685a      	ldr	r2, [r3, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	429a      	cmp	r2, r3
 8002766:	d305      	bcc.n	8002774 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	429a      	cmp	r2, r3
 8002772:	d903      	bls.n	800277c <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	76fb      	strb	r3, [r7, #27]
 8002778:	f000 bea5 	b.w	80034c6 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 800277c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002780:	2b08      	cmp	r3, #8
 8002782:	f200 8277 	bhi.w	8002c74 <UART_SetConfig+0xb34>
 8002786:	a201      	add	r2, pc, #4	; (adr r2, 800278c <UART_SetConfig+0x64c>)
 8002788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278c:	080027b1 	.word	0x080027b1
 8002790:	08002c75 	.word	0x08002c75
 8002794:	080028ef 	.word	0x080028ef
 8002798:	08002c75 	.word	0x08002c75
 800279c:	080029e5 	.word	0x080029e5
 80027a0:	08002c75 	.word	0x08002c75
 80027a4:	08002c75 	.word	0x08002c75
 80027a8:	08002c75 	.word	0x08002c75
 80027ac:	08002b23 	.word	0x08002b23
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80027b0:	f7ff f9b8 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 80027b4:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d067      	beq.n	8002896 <UART_SetConfig+0x756>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d05e      	beq.n	800288c <UART_SetConfig+0x74c>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d055      	beq.n	8002882 <UART_SetConfig+0x742>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	2b03      	cmp	r3, #3
 80027dc:	d04c      	beq.n	8002878 <UART_SetConfig+0x738>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d043      	beq.n	800286e <UART_SetConfig+0x72e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	2b05      	cmp	r3, #5
 80027ec:	d03a      	beq.n	8002864 <UART_SetConfig+0x724>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f2:	2b06      	cmp	r3, #6
 80027f4:	d031      	beq.n	800285a <UART_SetConfig+0x71a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	2b07      	cmp	r3, #7
 80027fc:	d028      	beq.n	8002850 <UART_SetConfig+0x710>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	2b08      	cmp	r3, #8
 8002804:	d01f      	beq.n	8002846 <UART_SetConfig+0x706>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	2b09      	cmp	r3, #9
 800280c:	d016      	beq.n	800283c <UART_SetConfig+0x6fc>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	2b0a      	cmp	r3, #10
 8002814:	d00d      	beq.n	8002832 <UART_SetConfig+0x6f2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800281a:	2b0b      	cmp	r3, #11
 800281c:	d104      	bne.n	8002828 <UART_SetConfig+0x6e8>
 800281e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002822:	f04f 0400 	mov.w	r4, #0
 8002826:	e03a      	b.n	800289e <UART_SetConfig+0x75e>
 8002828:	f04f 0301 	mov.w	r3, #1
 800282c:	f04f 0400 	mov.w	r4, #0
 8002830:	e035      	b.n	800289e <UART_SetConfig+0x75e>
 8002832:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002836:	f04f 0400 	mov.w	r4, #0
 800283a:	e030      	b.n	800289e <UART_SetConfig+0x75e>
 800283c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002840:	f04f 0400 	mov.w	r4, #0
 8002844:	e02b      	b.n	800289e <UART_SetConfig+0x75e>
 8002846:	f04f 0320 	mov.w	r3, #32
 800284a:	f04f 0400 	mov.w	r4, #0
 800284e:	e026      	b.n	800289e <UART_SetConfig+0x75e>
 8002850:	f04f 0310 	mov.w	r3, #16
 8002854:	f04f 0400 	mov.w	r4, #0
 8002858:	e021      	b.n	800289e <UART_SetConfig+0x75e>
 800285a:	f04f 030c 	mov.w	r3, #12
 800285e:	f04f 0400 	mov.w	r4, #0
 8002862:	e01c      	b.n	800289e <UART_SetConfig+0x75e>
 8002864:	f04f 030a 	mov.w	r3, #10
 8002868:	f04f 0400 	mov.w	r4, #0
 800286c:	e017      	b.n	800289e <UART_SetConfig+0x75e>
 800286e:	f04f 0308 	mov.w	r3, #8
 8002872:	f04f 0400 	mov.w	r4, #0
 8002876:	e012      	b.n	800289e <UART_SetConfig+0x75e>
 8002878:	f04f 0306 	mov.w	r3, #6
 800287c:	f04f 0400 	mov.w	r4, #0
 8002880:	e00d      	b.n	800289e <UART_SetConfig+0x75e>
 8002882:	f04f 0304 	mov.w	r3, #4
 8002886:	f04f 0400 	mov.w	r4, #0
 800288a:	e008      	b.n	800289e <UART_SetConfig+0x75e>
 800288c:	f04f 0302 	mov.w	r3, #2
 8002890:	f04f 0400 	mov.w	r4, #0
 8002894:	e003      	b.n	800289e <UART_SetConfig+0x75e>
 8002896:	f04f 0301 	mov.w	r3, #1
 800289a:	f04f 0400 	mov.w	r4, #0
 800289e:	461a      	mov	r2, r3
 80028a0:	4623      	mov	r3, r4
 80028a2:	f7fd fcb9 	bl	8000218 <__aeabi_uldivmod>
 80028a6:	4603      	mov	r3, r0
 80028a8:	460c      	mov	r4, r1
 80028aa:	4619      	mov	r1, r3
 80028ac:	4622      	mov	r2, r4
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	f04f 0400 	mov.w	r4, #0
 80028b6:	0214      	lsls	r4, r2, #8
 80028b8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80028bc:	020b      	lsls	r3, r1, #8
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	6852      	ldr	r2, [r2, #4]
 80028c2:	0852      	lsrs	r2, r2, #1
 80028c4:	4611      	mov	r1, r2
 80028c6:	f04f 0200 	mov.w	r2, #0
 80028ca:	eb13 0b01 	adds.w	fp, r3, r1
 80028ce:	eb44 0c02 	adc.w	ip, r4, r2
 80028d2:	4658      	mov	r0, fp
 80028d4:	4661      	mov	r1, ip
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f04f 0400 	mov.w	r4, #0
 80028de:	461a      	mov	r2, r3
 80028e0:	4623      	mov	r3, r4
 80028e2:	f7fd fc99 	bl	8000218 <__aeabi_uldivmod>
 80028e6:	4603      	mov	r3, r0
 80028e8:	460c      	mov	r4, r1
 80028ea:	61fb      	str	r3, [r7, #28]
            break;
 80028ec:	e1c5      	b.n	8002c7a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d05b      	beq.n	80029ae <UART_SetConfig+0x86e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d053      	beq.n	80029a6 <UART_SetConfig+0x866>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002902:	2b02      	cmp	r3, #2
 8002904:	d04b      	beq.n	800299e <UART_SetConfig+0x85e>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290a:	2b03      	cmp	r3, #3
 800290c:	d043      	beq.n	8002996 <UART_SetConfig+0x856>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002912:	2b04      	cmp	r3, #4
 8002914:	d03b      	beq.n	800298e <UART_SetConfig+0x84e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291a:	2b05      	cmp	r3, #5
 800291c:	d033      	beq.n	8002986 <UART_SetConfig+0x846>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002922:	2b06      	cmp	r3, #6
 8002924:	d02b      	beq.n	800297e <UART_SetConfig+0x83e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	2b07      	cmp	r3, #7
 800292c:	d023      	beq.n	8002976 <UART_SetConfig+0x836>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002932:	2b08      	cmp	r3, #8
 8002934:	d01b      	beq.n	800296e <UART_SetConfig+0x82e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	2b09      	cmp	r3, #9
 800293c:	d013      	beq.n	8002966 <UART_SetConfig+0x826>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	2b0a      	cmp	r3, #10
 8002944:	d00b      	beq.n	800295e <UART_SetConfig+0x81e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	2b0b      	cmp	r3, #11
 800294c:	d103      	bne.n	8002956 <UART_SetConfig+0x816>
 800294e:	4bae      	ldr	r3, [pc, #696]	; (8002c08 <UART_SetConfig+0xac8>)
 8002950:	f04f 0400 	mov.w	r4, #0
 8002954:	e02e      	b.n	80029b4 <UART_SetConfig+0x874>
 8002956:	4bad      	ldr	r3, [pc, #692]	; (8002c0c <UART_SetConfig+0xacc>)
 8002958:	f04f 0400 	mov.w	r4, #0
 800295c:	e02a      	b.n	80029b4 <UART_SetConfig+0x874>
 800295e:	4bac      	ldr	r3, [pc, #688]	; (8002c10 <UART_SetConfig+0xad0>)
 8002960:	f04f 0400 	mov.w	r4, #0
 8002964:	e026      	b.n	80029b4 <UART_SetConfig+0x874>
 8002966:	4bab      	ldr	r3, [pc, #684]	; (8002c14 <UART_SetConfig+0xad4>)
 8002968:	f04f 0400 	mov.w	r4, #0
 800296c:	e022      	b.n	80029b4 <UART_SetConfig+0x874>
 800296e:	4baa      	ldr	r3, [pc, #680]	; (8002c18 <UART_SetConfig+0xad8>)
 8002970:	f04f 0400 	mov.w	r4, #0
 8002974:	e01e      	b.n	80029b4 <UART_SetConfig+0x874>
 8002976:	4ba9      	ldr	r3, [pc, #676]	; (8002c1c <UART_SetConfig+0xadc>)
 8002978:	f04f 0400 	mov.w	r4, #0
 800297c:	e01a      	b.n	80029b4 <UART_SetConfig+0x874>
 800297e:	a49e      	add	r4, pc, #632	; (adr r4, 8002bf8 <UART_SetConfig+0xab8>)
 8002980:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002984:	e016      	b.n	80029b4 <UART_SetConfig+0x874>
 8002986:	4ba6      	ldr	r3, [pc, #664]	; (8002c20 <UART_SetConfig+0xae0>)
 8002988:	f04f 0400 	mov.w	r4, #0
 800298c:	e012      	b.n	80029b4 <UART_SetConfig+0x874>
 800298e:	4ba5      	ldr	r3, [pc, #660]	; (8002c24 <UART_SetConfig+0xae4>)
 8002990:	f04f 0400 	mov.w	r4, #0
 8002994:	e00e      	b.n	80029b4 <UART_SetConfig+0x874>
 8002996:	a49a      	add	r4, pc, #616	; (adr r4, 8002c00 <UART_SetConfig+0xac0>)
 8002998:	e9d4 3400 	ldrd	r3, r4, [r4]
 800299c:	e00a      	b.n	80029b4 <UART_SetConfig+0x874>
 800299e:	4ba2      	ldr	r3, [pc, #648]	; (8002c28 <UART_SetConfig+0xae8>)
 80029a0:	f04f 0400 	mov.w	r4, #0
 80029a4:	e006      	b.n	80029b4 <UART_SetConfig+0x874>
 80029a6:	4ba1      	ldr	r3, [pc, #644]	; (8002c2c <UART_SetConfig+0xaec>)
 80029a8:	f04f 0400 	mov.w	r4, #0
 80029ac:	e002      	b.n	80029b4 <UART_SetConfig+0x874>
 80029ae:	4b97      	ldr	r3, [pc, #604]	; (8002c0c <UART_SetConfig+0xacc>)
 80029b0:	f04f 0400 	mov.w	r4, #0
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	6852      	ldr	r2, [r2, #4]
 80029b8:	0852      	lsrs	r2, r2, #1
 80029ba:	4611      	mov	r1, r2
 80029bc:	f04f 0200 	mov.w	r2, #0
 80029c0:	eb13 0b01 	adds.w	fp, r3, r1
 80029c4:	eb44 0c02 	adc.w	ip, r4, r2
 80029c8:	4658      	mov	r0, fp
 80029ca:	4661      	mov	r1, ip
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f04f 0400 	mov.w	r4, #0
 80029d4:	461a      	mov	r2, r3
 80029d6:	4623      	mov	r3, r4
 80029d8:	f7fd fc1e 	bl	8000218 <__aeabi_uldivmod>
 80029dc:	4603      	mov	r3, r0
 80029de:	460c      	mov	r4, r1
 80029e0:	61fb      	str	r3, [r7, #28]
            break;
 80029e2:	e14a      	b.n	8002c7a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80029e4:	f7ff f830 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 80029e8:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f04f 0100 	mov.w	r1, #0
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d067      	beq.n	8002aca <UART_SetConfig+0x98a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d05e      	beq.n	8002ac0 <UART_SetConfig+0x980>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d055      	beq.n	8002ab6 <UART_SetConfig+0x976>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d04c      	beq.n	8002aac <UART_SetConfig+0x96c>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d043      	beq.n	8002aa2 <UART_SetConfig+0x962>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	2b05      	cmp	r3, #5
 8002a20:	d03a      	beq.n	8002a98 <UART_SetConfig+0x958>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	2b06      	cmp	r3, #6
 8002a28:	d031      	beq.n	8002a8e <UART_SetConfig+0x94e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	2b07      	cmp	r3, #7
 8002a30:	d028      	beq.n	8002a84 <UART_SetConfig+0x944>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	2b08      	cmp	r3, #8
 8002a38:	d01f      	beq.n	8002a7a <UART_SetConfig+0x93a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2b09      	cmp	r3, #9
 8002a40:	d016      	beq.n	8002a70 <UART_SetConfig+0x930>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	2b0a      	cmp	r3, #10
 8002a48:	d00d      	beq.n	8002a66 <UART_SetConfig+0x926>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	2b0b      	cmp	r3, #11
 8002a50:	d104      	bne.n	8002a5c <UART_SetConfig+0x91c>
 8002a52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a56:	f04f 0400 	mov.w	r4, #0
 8002a5a:	e03a      	b.n	8002ad2 <UART_SetConfig+0x992>
 8002a5c:	f04f 0301 	mov.w	r3, #1
 8002a60:	f04f 0400 	mov.w	r4, #0
 8002a64:	e035      	b.n	8002ad2 <UART_SetConfig+0x992>
 8002a66:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002a6a:	f04f 0400 	mov.w	r4, #0
 8002a6e:	e030      	b.n	8002ad2 <UART_SetConfig+0x992>
 8002a70:	f04f 0340 	mov.w	r3, #64	; 0x40
 8002a74:	f04f 0400 	mov.w	r4, #0
 8002a78:	e02b      	b.n	8002ad2 <UART_SetConfig+0x992>
 8002a7a:	f04f 0320 	mov.w	r3, #32
 8002a7e:	f04f 0400 	mov.w	r4, #0
 8002a82:	e026      	b.n	8002ad2 <UART_SetConfig+0x992>
 8002a84:	f04f 0310 	mov.w	r3, #16
 8002a88:	f04f 0400 	mov.w	r4, #0
 8002a8c:	e021      	b.n	8002ad2 <UART_SetConfig+0x992>
 8002a8e:	f04f 030c 	mov.w	r3, #12
 8002a92:	f04f 0400 	mov.w	r4, #0
 8002a96:	e01c      	b.n	8002ad2 <UART_SetConfig+0x992>
 8002a98:	f04f 030a 	mov.w	r3, #10
 8002a9c:	f04f 0400 	mov.w	r4, #0
 8002aa0:	e017      	b.n	8002ad2 <UART_SetConfig+0x992>
 8002aa2:	f04f 0308 	mov.w	r3, #8
 8002aa6:	f04f 0400 	mov.w	r4, #0
 8002aaa:	e012      	b.n	8002ad2 <UART_SetConfig+0x992>
 8002aac:	f04f 0306 	mov.w	r3, #6
 8002ab0:	f04f 0400 	mov.w	r4, #0
 8002ab4:	e00d      	b.n	8002ad2 <UART_SetConfig+0x992>
 8002ab6:	f04f 0304 	mov.w	r3, #4
 8002aba:	f04f 0400 	mov.w	r4, #0
 8002abe:	e008      	b.n	8002ad2 <UART_SetConfig+0x992>
 8002ac0:	f04f 0302 	mov.w	r3, #2
 8002ac4:	f04f 0400 	mov.w	r4, #0
 8002ac8:	e003      	b.n	8002ad2 <UART_SetConfig+0x992>
 8002aca:	f04f 0301 	mov.w	r3, #1
 8002ace:	f04f 0400 	mov.w	r4, #0
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4623      	mov	r3, r4
 8002ad6:	f7fd fb9f 	bl	8000218 <__aeabi_uldivmod>
 8002ada:	4603      	mov	r3, r0
 8002adc:	460c      	mov	r4, r1
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4622      	mov	r2, r4
 8002ae2:	f04f 0300 	mov.w	r3, #0
 8002ae6:	f04f 0400 	mov.w	r4, #0
 8002aea:	0214      	lsls	r4, r2, #8
 8002aec:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8002af0:	020b      	lsls	r3, r1, #8
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	6852      	ldr	r2, [r2, #4]
 8002af6:	0852      	lsrs	r2, r2, #1
 8002af8:	4611      	mov	r1, r2
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	eb13 0b01 	adds.w	fp, r3, r1
 8002b02:	eb44 0c02 	adc.w	ip, r4, r2
 8002b06:	4658      	mov	r0, fp
 8002b08:	4661      	mov	r1, ip
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f04f 0400 	mov.w	r4, #0
 8002b12:	461a      	mov	r2, r3
 8002b14:	4623      	mov	r3, r4
 8002b16:	f7fd fb7f 	bl	8000218 <__aeabi_uldivmod>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	460c      	mov	r4, r1
 8002b1e:	61fb      	str	r3, [r7, #28]
            break;
 8002b20:	e0ab      	b.n	8002c7a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 8088 	beq.w	8002c3c <UART_SetConfig+0xafc>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d05b      	beq.n	8002bec <UART_SetConfig+0xaac>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d052      	beq.n	8002be2 <UART_SetConfig+0xaa2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d04a      	beq.n	8002bda <UART_SetConfig+0xa9a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b48:	2b04      	cmp	r3, #4
 8002b4a:	d041      	beq.n	8002bd0 <UART_SetConfig+0xa90>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	d039      	beq.n	8002bc8 <UART_SetConfig+0xa88>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	2b06      	cmp	r3, #6
 8002b5a:	d031      	beq.n	8002bc0 <UART_SetConfig+0xa80>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	2b07      	cmp	r3, #7
 8002b62:	d028      	beq.n	8002bb6 <UART_SetConfig+0xa76>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d01f      	beq.n	8002bac <UART_SetConfig+0xa6c>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b70:	2b09      	cmp	r3, #9
 8002b72:	d016      	beq.n	8002ba2 <UART_SetConfig+0xa62>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	2b0a      	cmp	r3, #10
 8002b7a:	d00d      	beq.n	8002b98 <UART_SetConfig+0xa58>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	2b0b      	cmp	r3, #11
 8002b82:	d104      	bne.n	8002b8e <UART_SetConfig+0xa4e>
 8002b84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b88:	f04f 0400 	mov.w	r4, #0
 8002b8c:	e05a      	b.n	8002c44 <UART_SetConfig+0xb04>
 8002b8e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002b92:	f04f 0400 	mov.w	r4, #0
 8002b96:	e055      	b.n	8002c44 <UART_SetConfig+0xb04>
 8002b98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b9c:	f04f 0400 	mov.w	r4, #0
 8002ba0:	e050      	b.n	8002c44 <UART_SetConfig+0xb04>
 8002ba2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ba6:	f04f 0400 	mov.w	r4, #0
 8002baa:	e04b      	b.n	8002c44 <UART_SetConfig+0xb04>
 8002bac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002bb0:	f04f 0400 	mov.w	r4, #0
 8002bb4:	e046      	b.n	8002c44 <UART_SetConfig+0xb04>
 8002bb6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002bba:	f04f 0400 	mov.w	r4, #0
 8002bbe:	e041      	b.n	8002c44 <UART_SetConfig+0xb04>
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	; (8002c30 <UART_SetConfig+0xaf0>)
 8002bc2:	f04f 0400 	mov.w	r4, #0
 8002bc6:	e03d      	b.n	8002c44 <UART_SetConfig+0xb04>
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <UART_SetConfig+0xaf4>)
 8002bca:	f04f 0400 	mov.w	r4, #0
 8002bce:	e039      	b.n	8002c44 <UART_SetConfig+0xb04>
 8002bd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002bd4:	f04f 0400 	mov.w	r4, #0
 8002bd8:	e034      	b.n	8002c44 <UART_SetConfig+0xb04>
 8002bda:	4b17      	ldr	r3, [pc, #92]	; (8002c38 <UART_SetConfig+0xaf8>)
 8002bdc:	f04f 0400 	mov.w	r4, #0
 8002be0:	e030      	b.n	8002c44 <UART_SetConfig+0xb04>
 8002be2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002be6:	f04f 0400 	mov.w	r4, #0
 8002bea:	e02b      	b.n	8002c44 <UART_SetConfig+0xb04>
 8002bec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bf0:	f04f 0400 	mov.w	r4, #0
 8002bf4:	e026      	b.n	8002c44 <UART_SetConfig+0xb04>
 8002bf6:	bf00      	nop
 8002bf8:	14585500 	.word	0x14585500
 8002bfc:	00000000 	.word	0x00000000
 8002c00:	28b0aa00 	.word	0x28b0aa00
 8002c04:	00000000 	.word	0x00000000
 8002c08:	00f42400 	.word	0x00f42400
 8002c0c:	f4240000 	.word	0xf4240000
 8002c10:	01e84800 	.word	0x01e84800
 8002c14:	03d09000 	.word	0x03d09000
 8002c18:	07a12000 	.word	0x07a12000
 8002c1c:	0f424000 	.word	0x0f424000
 8002c20:	186a0000 	.word	0x186a0000
 8002c24:	1e848000 	.word	0x1e848000
 8002c28:	3d090000 	.word	0x3d090000
 8002c2c:	7a120000 	.word	0x7a120000
 8002c30:	000aaa00 	.word	0x000aaa00
 8002c34:	000ccc00 	.word	0x000ccc00
 8002c38:	00155500 	.word	0x00155500
 8002c3c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002c40:	f04f 0400 	mov.w	r4, #0
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6852      	ldr	r2, [r2, #4]
 8002c48:	0852      	lsrs	r2, r2, #1
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	eb13 0b01 	adds.w	fp, r3, r1
 8002c54:	eb44 0c02 	adc.w	ip, r4, r2
 8002c58:	4658      	mov	r0, fp
 8002c5a:	4661      	mov	r1, ip
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f04f 0400 	mov.w	r4, #0
 8002c64:	461a      	mov	r2, r3
 8002c66:	4623      	mov	r3, r4
 8002c68:	f7fd fad6 	bl	8000218 <__aeabi_uldivmod>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	460c      	mov	r4, r1
 8002c70:	61fb      	str	r3, [r7, #28]
            break;
 8002c72:	e002      	b.n	8002c7a <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	76fb      	strb	r3, [r7, #27]
            break;
 8002c78:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c80:	d309      	bcc.n	8002c96 <UART_SetConfig+0xb56>
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c88:	d205      	bcs.n	8002c96 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	60da      	str	r2, [r3, #12]
 8002c92:	f000 bc18 	b.w	80034c6 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	76fb      	strb	r3, [r7, #27]
 8002c9a:	f000 bc14 	b.w	80034c6 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ca6:	f040 8204 	bne.w	80030b2 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 8002caa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	f200 81df 	bhi.w	8003072 <UART_SetConfig+0xf32>
 8002cb4:	a201      	add	r2, pc, #4	; (adr r2, 8002cbc <UART_SetConfig+0xb7c>)
 8002cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cba:	bf00      	nop
 8002cbc:	08002ce1 	.word	0x08002ce1
 8002cc0:	08002d99 	.word	0x08002d99
 8002cc4:	08002e51 	.word	0x08002e51
 8002cc8:	08003073 	.word	0x08003073
 8002ccc:	08002ef9 	.word	0x08002ef9
 8002cd0:	08003073 	.word	0x08003073
 8002cd4:	08003073 	.word	0x08003073
 8002cd8:	08003073 	.word	0x08003073
 8002cdc:	08002fb1 	.word	0x08002fb1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ce0:	f7fe ff20 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 8002ce4:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d044      	beq.n	8002d78 <UART_SetConfig+0xc38>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d03e      	beq.n	8002d74 <UART_SetConfig+0xc34>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d038      	beq.n	8002d70 <UART_SetConfig+0xc30>
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d032      	beq.n	8002d6c <UART_SetConfig+0xc2c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d02c      	beq.n	8002d68 <UART_SetConfig+0xc28>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d12:	2b05      	cmp	r3, #5
 8002d14:	d026      	beq.n	8002d64 <UART_SetConfig+0xc24>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1a:	2b06      	cmp	r3, #6
 8002d1c:	d020      	beq.n	8002d60 <UART_SetConfig+0xc20>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	2b07      	cmp	r3, #7
 8002d24:	d01a      	beq.n	8002d5c <UART_SetConfig+0xc1c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d014      	beq.n	8002d58 <UART_SetConfig+0xc18>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	2b09      	cmp	r3, #9
 8002d34:	d00e      	beq.n	8002d54 <UART_SetConfig+0xc14>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	2b0a      	cmp	r3, #10
 8002d3c:	d008      	beq.n	8002d50 <UART_SetConfig+0xc10>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	2b0b      	cmp	r3, #11
 8002d44:	d102      	bne.n	8002d4c <UART_SetConfig+0xc0c>
 8002d46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d4a:	e016      	b.n	8002d7a <UART_SetConfig+0xc3a>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e014      	b.n	8002d7a <UART_SetConfig+0xc3a>
 8002d50:	2380      	movs	r3, #128	; 0x80
 8002d52:	e012      	b.n	8002d7a <UART_SetConfig+0xc3a>
 8002d54:	2340      	movs	r3, #64	; 0x40
 8002d56:	e010      	b.n	8002d7a <UART_SetConfig+0xc3a>
 8002d58:	2320      	movs	r3, #32
 8002d5a:	e00e      	b.n	8002d7a <UART_SetConfig+0xc3a>
 8002d5c:	2310      	movs	r3, #16
 8002d5e:	e00c      	b.n	8002d7a <UART_SetConfig+0xc3a>
 8002d60:	230c      	movs	r3, #12
 8002d62:	e00a      	b.n	8002d7a <UART_SetConfig+0xc3a>
 8002d64:	230a      	movs	r3, #10
 8002d66:	e008      	b.n	8002d7a <UART_SetConfig+0xc3a>
 8002d68:	2308      	movs	r3, #8
 8002d6a:	e006      	b.n	8002d7a <UART_SetConfig+0xc3a>
 8002d6c:	2306      	movs	r3, #6
 8002d6e:	e004      	b.n	8002d7a <UART_SetConfig+0xc3a>
 8002d70:	2304      	movs	r3, #4
 8002d72:	e002      	b.n	8002d7a <UART_SetConfig+0xc3a>
 8002d74:	2302      	movs	r3, #2
 8002d76:	e000      	b.n	8002d7a <UART_SetConfig+0xc3a>
 8002d78:	2301      	movs	r3, #1
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d80:	005a      	lsls	r2, r3, #1
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	085b      	lsrs	r3, r3, #1
 8002d88:	441a      	add	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	61fb      	str	r3, [r7, #28]
        break;
 8002d96:	e16f      	b.n	8003078 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d98:	f7fe feda 	bl	8001b50 <HAL_RCC_GetPCLK2Freq>
 8002d9c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d044      	beq.n	8002e30 <UART_SetConfig+0xcf0>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d03e      	beq.n	8002e2c <UART_SetConfig+0xcec>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d038      	beq.n	8002e28 <UART_SetConfig+0xce8>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	2b03      	cmp	r3, #3
 8002dbc:	d032      	beq.n	8002e24 <UART_SetConfig+0xce4>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	2b04      	cmp	r3, #4
 8002dc4:	d02c      	beq.n	8002e20 <UART_SetConfig+0xce0>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	2b05      	cmp	r3, #5
 8002dcc:	d026      	beq.n	8002e1c <UART_SetConfig+0xcdc>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	2b06      	cmp	r3, #6
 8002dd4:	d020      	beq.n	8002e18 <UART_SetConfig+0xcd8>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dda:	2b07      	cmp	r3, #7
 8002ddc:	d01a      	beq.n	8002e14 <UART_SetConfig+0xcd4>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	2b08      	cmp	r3, #8
 8002de4:	d014      	beq.n	8002e10 <UART_SetConfig+0xcd0>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	2b09      	cmp	r3, #9
 8002dec:	d00e      	beq.n	8002e0c <UART_SetConfig+0xccc>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df2:	2b0a      	cmp	r3, #10
 8002df4:	d008      	beq.n	8002e08 <UART_SetConfig+0xcc8>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2b0b      	cmp	r3, #11
 8002dfc:	d102      	bne.n	8002e04 <UART_SetConfig+0xcc4>
 8002dfe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e02:	e016      	b.n	8002e32 <UART_SetConfig+0xcf2>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e014      	b.n	8002e32 <UART_SetConfig+0xcf2>
 8002e08:	2380      	movs	r3, #128	; 0x80
 8002e0a:	e012      	b.n	8002e32 <UART_SetConfig+0xcf2>
 8002e0c:	2340      	movs	r3, #64	; 0x40
 8002e0e:	e010      	b.n	8002e32 <UART_SetConfig+0xcf2>
 8002e10:	2320      	movs	r3, #32
 8002e12:	e00e      	b.n	8002e32 <UART_SetConfig+0xcf2>
 8002e14:	2310      	movs	r3, #16
 8002e16:	e00c      	b.n	8002e32 <UART_SetConfig+0xcf2>
 8002e18:	230c      	movs	r3, #12
 8002e1a:	e00a      	b.n	8002e32 <UART_SetConfig+0xcf2>
 8002e1c:	230a      	movs	r3, #10
 8002e1e:	e008      	b.n	8002e32 <UART_SetConfig+0xcf2>
 8002e20:	2308      	movs	r3, #8
 8002e22:	e006      	b.n	8002e32 <UART_SetConfig+0xcf2>
 8002e24:	2306      	movs	r3, #6
 8002e26:	e004      	b.n	8002e32 <UART_SetConfig+0xcf2>
 8002e28:	2304      	movs	r3, #4
 8002e2a:	e002      	b.n	8002e32 <UART_SetConfig+0xcf2>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e000      	b.n	8002e32 <UART_SetConfig+0xcf2>
 8002e30:	2301      	movs	r3, #1
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e38:	005a      	lsls	r2, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	441a      	add	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	61fb      	str	r3, [r7, #28]
        break;
 8002e4e:	e113      	b.n	8003078 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d043      	beq.n	8002ee0 <UART_SetConfig+0xda0>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d03d      	beq.n	8002edc <UART_SetConfig+0xd9c>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d037      	beq.n	8002ed8 <UART_SetConfig+0xd98>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d031      	beq.n	8002ed4 <UART_SetConfig+0xd94>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d02b      	beq.n	8002ed0 <UART_SetConfig+0xd90>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2b05      	cmp	r3, #5
 8002e7e:	d025      	beq.n	8002ecc <UART_SetConfig+0xd8c>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e84:	2b06      	cmp	r3, #6
 8002e86:	d01f      	beq.n	8002ec8 <UART_SetConfig+0xd88>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e8c:	2b07      	cmp	r3, #7
 8002e8e:	d019      	beq.n	8002ec4 <UART_SetConfig+0xd84>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d013      	beq.n	8002ec0 <UART_SetConfig+0xd80>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e9c:	2b09      	cmp	r3, #9
 8002e9e:	d00d      	beq.n	8002ebc <UART_SetConfig+0xd7c>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	2b0a      	cmp	r3, #10
 8002ea6:	d007      	beq.n	8002eb8 <UART_SetConfig+0xd78>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eac:	2b0b      	cmp	r3, #11
 8002eae:	d101      	bne.n	8002eb4 <UART_SetConfig+0xd74>
 8002eb0:	4b8d      	ldr	r3, [pc, #564]	; (80030e8 <UART_SetConfig+0xfa8>)
 8002eb2:	e016      	b.n	8002ee2 <UART_SetConfig+0xda2>
 8002eb4:	4b8d      	ldr	r3, [pc, #564]	; (80030ec <UART_SetConfig+0xfac>)
 8002eb6:	e014      	b.n	8002ee2 <UART_SetConfig+0xda2>
 8002eb8:	4b8d      	ldr	r3, [pc, #564]	; (80030f0 <UART_SetConfig+0xfb0>)
 8002eba:	e012      	b.n	8002ee2 <UART_SetConfig+0xda2>
 8002ebc:	4b8d      	ldr	r3, [pc, #564]	; (80030f4 <UART_SetConfig+0xfb4>)
 8002ebe:	e010      	b.n	8002ee2 <UART_SetConfig+0xda2>
 8002ec0:	4b8d      	ldr	r3, [pc, #564]	; (80030f8 <UART_SetConfig+0xfb8>)
 8002ec2:	e00e      	b.n	8002ee2 <UART_SetConfig+0xda2>
 8002ec4:	4b8d      	ldr	r3, [pc, #564]	; (80030fc <UART_SetConfig+0xfbc>)
 8002ec6:	e00c      	b.n	8002ee2 <UART_SetConfig+0xda2>
 8002ec8:	4b8d      	ldr	r3, [pc, #564]	; (8003100 <UART_SetConfig+0xfc0>)
 8002eca:	e00a      	b.n	8002ee2 <UART_SetConfig+0xda2>
 8002ecc:	4b8d      	ldr	r3, [pc, #564]	; (8003104 <UART_SetConfig+0xfc4>)
 8002ece:	e008      	b.n	8002ee2 <UART_SetConfig+0xda2>
 8002ed0:	4b8d      	ldr	r3, [pc, #564]	; (8003108 <UART_SetConfig+0xfc8>)
 8002ed2:	e006      	b.n	8002ee2 <UART_SetConfig+0xda2>
 8002ed4:	4b8d      	ldr	r3, [pc, #564]	; (800310c <UART_SetConfig+0xfcc>)
 8002ed6:	e004      	b.n	8002ee2 <UART_SetConfig+0xda2>
 8002ed8:	4b8d      	ldr	r3, [pc, #564]	; (8003110 <UART_SetConfig+0xfd0>)
 8002eda:	e002      	b.n	8002ee2 <UART_SetConfig+0xda2>
 8002edc:	4b8d      	ldr	r3, [pc, #564]	; (8003114 <UART_SetConfig+0xfd4>)
 8002ede:	e000      	b.n	8002ee2 <UART_SetConfig+0xda2>
 8002ee0:	4b82      	ldr	r3, [pc, #520]	; (80030ec <UART_SetConfig+0xfac>)
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6852      	ldr	r2, [r2, #4]
 8002ee6:	0852      	lsrs	r2, r2, #1
 8002ee8:	441a      	add	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	61fb      	str	r3, [r7, #28]
        break;
 8002ef6:	e0bf      	b.n	8003078 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ef8:	f7fe fda6 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 8002efc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d044      	beq.n	8002f90 <UART_SetConfig+0xe50>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d03e      	beq.n	8002f8c <UART_SetConfig+0xe4c>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d038      	beq.n	8002f88 <UART_SetConfig+0xe48>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	2b03      	cmp	r3, #3
 8002f1c:	d032      	beq.n	8002f84 <UART_SetConfig+0xe44>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d02c      	beq.n	8002f80 <UART_SetConfig+0xe40>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	2b05      	cmp	r3, #5
 8002f2c:	d026      	beq.n	8002f7c <UART_SetConfig+0xe3c>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	2b06      	cmp	r3, #6
 8002f34:	d020      	beq.n	8002f78 <UART_SetConfig+0xe38>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	2b07      	cmp	r3, #7
 8002f3c:	d01a      	beq.n	8002f74 <UART_SetConfig+0xe34>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	2b08      	cmp	r3, #8
 8002f44:	d014      	beq.n	8002f70 <UART_SetConfig+0xe30>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	2b09      	cmp	r3, #9
 8002f4c:	d00e      	beq.n	8002f6c <UART_SetConfig+0xe2c>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	2b0a      	cmp	r3, #10
 8002f54:	d008      	beq.n	8002f68 <UART_SetConfig+0xe28>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5a:	2b0b      	cmp	r3, #11
 8002f5c:	d102      	bne.n	8002f64 <UART_SetConfig+0xe24>
 8002f5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f62:	e016      	b.n	8002f92 <UART_SetConfig+0xe52>
 8002f64:	2301      	movs	r3, #1
 8002f66:	e014      	b.n	8002f92 <UART_SetConfig+0xe52>
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	e012      	b.n	8002f92 <UART_SetConfig+0xe52>
 8002f6c:	2340      	movs	r3, #64	; 0x40
 8002f6e:	e010      	b.n	8002f92 <UART_SetConfig+0xe52>
 8002f70:	2320      	movs	r3, #32
 8002f72:	e00e      	b.n	8002f92 <UART_SetConfig+0xe52>
 8002f74:	2310      	movs	r3, #16
 8002f76:	e00c      	b.n	8002f92 <UART_SetConfig+0xe52>
 8002f78:	230c      	movs	r3, #12
 8002f7a:	e00a      	b.n	8002f92 <UART_SetConfig+0xe52>
 8002f7c:	230a      	movs	r3, #10
 8002f7e:	e008      	b.n	8002f92 <UART_SetConfig+0xe52>
 8002f80:	2308      	movs	r3, #8
 8002f82:	e006      	b.n	8002f92 <UART_SetConfig+0xe52>
 8002f84:	2306      	movs	r3, #6
 8002f86:	e004      	b.n	8002f92 <UART_SetConfig+0xe52>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	e002      	b.n	8002f92 <UART_SetConfig+0xe52>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e000      	b.n	8002f92 <UART_SetConfig+0xe52>
 8002f90:	2301      	movs	r3, #1
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f98:	005a      	lsls	r2, r3, #1
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	085b      	lsrs	r3, r3, #1
 8002fa0:	441a      	add	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	61fb      	str	r3, [r7, #28]
        break;
 8002fae:	e063      	b.n	8003078 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d04f      	beq.n	8003058 <UART_SetConfig+0xf18>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d048      	beq.n	8003052 <UART_SetConfig+0xf12>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d041      	beq.n	800304c <UART_SetConfig+0xf0c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	2b03      	cmp	r3, #3
 8002fce:	d03a      	beq.n	8003046 <UART_SetConfig+0xf06>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d033      	beq.n	8003040 <UART_SetConfig+0xf00>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	2b05      	cmp	r3, #5
 8002fde:	d02c      	beq.n	800303a <UART_SetConfig+0xefa>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	2b06      	cmp	r3, #6
 8002fe6:	d025      	beq.n	8003034 <UART_SetConfig+0xef4>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	2b07      	cmp	r3, #7
 8002fee:	d01e      	beq.n	800302e <UART_SetConfig+0xeee>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	2b08      	cmp	r3, #8
 8002ff6:	d017      	beq.n	8003028 <UART_SetConfig+0xee8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	2b09      	cmp	r3, #9
 8002ffe:	d010      	beq.n	8003022 <UART_SetConfig+0xee2>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2b0a      	cmp	r3, #10
 8003006:	d009      	beq.n	800301c <UART_SetConfig+0xedc>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300c:	2b0b      	cmp	r3, #11
 800300e:	d102      	bne.n	8003016 <UART_SetConfig+0xed6>
 8003010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003014:	e022      	b.n	800305c <UART_SetConfig+0xf1c>
 8003016:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800301a:	e01f      	b.n	800305c <UART_SetConfig+0xf1c>
 800301c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003020:	e01c      	b.n	800305c <UART_SetConfig+0xf1c>
 8003022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003026:	e019      	b.n	800305c <UART_SetConfig+0xf1c>
 8003028:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800302c:	e016      	b.n	800305c <UART_SetConfig+0xf1c>
 800302e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003032:	e013      	b.n	800305c <UART_SetConfig+0xf1c>
 8003034:	f241 5354 	movw	r3, #5460	; 0x1554
 8003038:	e010      	b.n	800305c <UART_SetConfig+0xf1c>
 800303a:	f641 1398 	movw	r3, #6552	; 0x1998
 800303e:	e00d      	b.n	800305c <UART_SetConfig+0xf1c>
 8003040:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003044:	e00a      	b.n	800305c <UART_SetConfig+0xf1c>
 8003046:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 800304a:	e007      	b.n	800305c <UART_SetConfig+0xf1c>
 800304c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003050:	e004      	b.n	800305c <UART_SetConfig+0xf1c>
 8003052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003056:	e001      	b.n	800305c <UART_SetConfig+0xf1c>
 8003058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6852      	ldr	r2, [r2, #4]
 8003060:	0852      	lsrs	r2, r2, #1
 8003062:	441a      	add	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	fbb2 f3f3 	udiv	r3, r2, r3
 800306c:	b29b      	uxth	r3, r3
 800306e:	61fb      	str	r3, [r7, #28]
        break;
 8003070:	e002      	b.n	8003078 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	76fb      	strb	r3, [r7, #27]
        break;
 8003076:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	2b0f      	cmp	r3, #15
 800307c:	d916      	bls.n	80030ac <UART_SetConfig+0xf6c>
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003084:	d212      	bcs.n	80030ac <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	b29b      	uxth	r3, r3
 800308a:	f023 030f 	bic.w	r3, r3, #15
 800308e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	085b      	lsrs	r3, r3, #1
 8003094:	b29b      	uxth	r3, r3
 8003096:	f003 0307 	and.w	r3, r3, #7
 800309a:	b29a      	uxth	r2, r3
 800309c:	89fb      	ldrh	r3, [r7, #14]
 800309e:	4313      	orrs	r3, r2
 80030a0:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	89fa      	ldrh	r2, [r7, #14]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	e20c      	b.n	80034c6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	76fb      	strb	r3, [r7, #27]
 80030b0:	e209      	b.n	80034c6 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 80030b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	f200 81f4 	bhi.w	80034a4 <UART_SetConfig+0x1364>
 80030bc:	a201      	add	r2, pc, #4	; (adr r2, 80030c4 <UART_SetConfig+0xf84>)
 80030be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c2:	bf00      	nop
 80030c4:	08003119 	.word	0x08003119
 80030c8:	080031cf 	.word	0x080031cf
 80030cc:	08003285 	.word	0x08003285
 80030d0:	080034a5 	.word	0x080034a5
 80030d4:	0800332f 	.word	0x0800332f
 80030d8:	080034a5 	.word	0x080034a5
 80030dc:	080034a5 	.word	0x080034a5
 80030e0:	080034a5 	.word	0x080034a5
 80030e4:	080033e5 	.word	0x080033e5
 80030e8:	0001e848 	.word	0x0001e848
 80030ec:	01e84800 	.word	0x01e84800
 80030f0:	0003d090 	.word	0x0003d090
 80030f4:	0007a120 	.word	0x0007a120
 80030f8:	000f4240 	.word	0x000f4240
 80030fc:	001e8480 	.word	0x001e8480
 8003100:	0028b0aa 	.word	0x0028b0aa
 8003104:	0030d400 	.word	0x0030d400
 8003108:	003d0900 	.word	0x003d0900
 800310c:	00516154 	.word	0x00516154
 8003110:	007a1200 	.word	0x007a1200
 8003114:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003118:	f7fe fd04 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 800311c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2b00      	cmp	r3, #0
 8003124:	d044      	beq.n	80031b0 <UART_SetConfig+0x1070>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	2b01      	cmp	r3, #1
 800312c:	d03e      	beq.n	80031ac <UART_SetConfig+0x106c>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	2b02      	cmp	r3, #2
 8003134:	d038      	beq.n	80031a8 <UART_SetConfig+0x1068>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	2b03      	cmp	r3, #3
 800313c:	d032      	beq.n	80031a4 <UART_SetConfig+0x1064>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	2b04      	cmp	r3, #4
 8003144:	d02c      	beq.n	80031a0 <UART_SetConfig+0x1060>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	2b05      	cmp	r3, #5
 800314c:	d026      	beq.n	800319c <UART_SetConfig+0x105c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	2b06      	cmp	r3, #6
 8003154:	d020      	beq.n	8003198 <UART_SetConfig+0x1058>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	2b07      	cmp	r3, #7
 800315c:	d01a      	beq.n	8003194 <UART_SetConfig+0x1054>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003162:	2b08      	cmp	r3, #8
 8003164:	d014      	beq.n	8003190 <UART_SetConfig+0x1050>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	2b09      	cmp	r3, #9
 800316c:	d00e      	beq.n	800318c <UART_SetConfig+0x104c>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003172:	2b0a      	cmp	r3, #10
 8003174:	d008      	beq.n	8003188 <UART_SetConfig+0x1048>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	2b0b      	cmp	r3, #11
 800317c:	d102      	bne.n	8003184 <UART_SetConfig+0x1044>
 800317e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003182:	e016      	b.n	80031b2 <UART_SetConfig+0x1072>
 8003184:	2301      	movs	r3, #1
 8003186:	e014      	b.n	80031b2 <UART_SetConfig+0x1072>
 8003188:	2380      	movs	r3, #128	; 0x80
 800318a:	e012      	b.n	80031b2 <UART_SetConfig+0x1072>
 800318c:	2340      	movs	r3, #64	; 0x40
 800318e:	e010      	b.n	80031b2 <UART_SetConfig+0x1072>
 8003190:	2320      	movs	r3, #32
 8003192:	e00e      	b.n	80031b2 <UART_SetConfig+0x1072>
 8003194:	2310      	movs	r3, #16
 8003196:	e00c      	b.n	80031b2 <UART_SetConfig+0x1072>
 8003198:	230c      	movs	r3, #12
 800319a:	e00a      	b.n	80031b2 <UART_SetConfig+0x1072>
 800319c:	230a      	movs	r3, #10
 800319e:	e008      	b.n	80031b2 <UART_SetConfig+0x1072>
 80031a0:	2308      	movs	r3, #8
 80031a2:	e006      	b.n	80031b2 <UART_SetConfig+0x1072>
 80031a4:	2306      	movs	r3, #6
 80031a6:	e004      	b.n	80031b2 <UART_SetConfig+0x1072>
 80031a8:	2304      	movs	r3, #4
 80031aa:	e002      	b.n	80031b2 <UART_SetConfig+0x1072>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e000      	b.n	80031b2 <UART_SetConfig+0x1072>
 80031b0:	2301      	movs	r3, #1
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	441a      	add	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	61fb      	str	r3, [r7, #28]
        break;
 80031cc:	e16d      	b.n	80034aa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80031ce:	f7fe fcbf 	bl	8001b50 <HAL_RCC_GetPCLK2Freq>
 80031d2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d044      	beq.n	8003266 <UART_SetConfig+0x1126>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d03e      	beq.n	8003262 <UART_SetConfig+0x1122>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d038      	beq.n	800325e <UART_SetConfig+0x111e>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d032      	beq.n	800325a <UART_SetConfig+0x111a>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	2b04      	cmp	r3, #4
 80031fa:	d02c      	beq.n	8003256 <UART_SetConfig+0x1116>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b05      	cmp	r3, #5
 8003202:	d026      	beq.n	8003252 <UART_SetConfig+0x1112>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	2b06      	cmp	r3, #6
 800320a:	d020      	beq.n	800324e <UART_SetConfig+0x110e>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	2b07      	cmp	r3, #7
 8003212:	d01a      	beq.n	800324a <UART_SetConfig+0x110a>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003218:	2b08      	cmp	r3, #8
 800321a:	d014      	beq.n	8003246 <UART_SetConfig+0x1106>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	2b09      	cmp	r3, #9
 8003222:	d00e      	beq.n	8003242 <UART_SetConfig+0x1102>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	2b0a      	cmp	r3, #10
 800322a:	d008      	beq.n	800323e <UART_SetConfig+0x10fe>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	2b0b      	cmp	r3, #11
 8003232:	d102      	bne.n	800323a <UART_SetConfig+0x10fa>
 8003234:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003238:	e016      	b.n	8003268 <UART_SetConfig+0x1128>
 800323a:	2301      	movs	r3, #1
 800323c:	e014      	b.n	8003268 <UART_SetConfig+0x1128>
 800323e:	2380      	movs	r3, #128	; 0x80
 8003240:	e012      	b.n	8003268 <UART_SetConfig+0x1128>
 8003242:	2340      	movs	r3, #64	; 0x40
 8003244:	e010      	b.n	8003268 <UART_SetConfig+0x1128>
 8003246:	2320      	movs	r3, #32
 8003248:	e00e      	b.n	8003268 <UART_SetConfig+0x1128>
 800324a:	2310      	movs	r3, #16
 800324c:	e00c      	b.n	8003268 <UART_SetConfig+0x1128>
 800324e:	230c      	movs	r3, #12
 8003250:	e00a      	b.n	8003268 <UART_SetConfig+0x1128>
 8003252:	230a      	movs	r3, #10
 8003254:	e008      	b.n	8003268 <UART_SetConfig+0x1128>
 8003256:	2308      	movs	r3, #8
 8003258:	e006      	b.n	8003268 <UART_SetConfig+0x1128>
 800325a:	2306      	movs	r3, #6
 800325c:	e004      	b.n	8003268 <UART_SetConfig+0x1128>
 800325e:	2304      	movs	r3, #4
 8003260:	e002      	b.n	8003268 <UART_SetConfig+0x1128>
 8003262:	2302      	movs	r3, #2
 8003264:	e000      	b.n	8003268 <UART_SetConfig+0x1128>
 8003266:	2301      	movs	r3, #1
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	fbb2 f2f3 	udiv	r2, r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	085b      	lsrs	r3, r3, #1
 8003274:	441a      	add	r2, r3
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	fbb2 f3f3 	udiv	r3, r2, r3
 800327e:	b29b      	uxth	r3, r3
 8003280:	61fb      	str	r3, [r7, #28]
        break;
 8003282:	e112      	b.n	80034aa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003288:	2b00      	cmp	r3, #0
 800328a:	d044      	beq.n	8003316 <UART_SetConfig+0x11d6>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	2b01      	cmp	r3, #1
 8003292:	d03e      	beq.n	8003312 <UART_SetConfig+0x11d2>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2b02      	cmp	r3, #2
 800329a:	d038      	beq.n	800330e <UART_SetConfig+0x11ce>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d032      	beq.n	800330a <UART_SetConfig+0x11ca>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d02c      	beq.n	8003306 <UART_SetConfig+0x11c6>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	d026      	beq.n	8003302 <UART_SetConfig+0x11c2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	2b06      	cmp	r3, #6
 80032ba:	d020      	beq.n	80032fe <UART_SetConfig+0x11be>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	2b07      	cmp	r3, #7
 80032c2:	d01a      	beq.n	80032fa <UART_SetConfig+0x11ba>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d014      	beq.n	80032f6 <UART_SetConfig+0x11b6>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	2b09      	cmp	r3, #9
 80032d2:	d00e      	beq.n	80032f2 <UART_SetConfig+0x11b2>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	2b0a      	cmp	r3, #10
 80032da:	d008      	beq.n	80032ee <UART_SetConfig+0x11ae>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	2b0b      	cmp	r3, #11
 80032e2:	d102      	bne.n	80032ea <UART_SetConfig+0x11aa>
 80032e4:	f24f 4324 	movw	r3, #62500	; 0xf424
 80032e8:	e016      	b.n	8003318 <UART_SetConfig+0x11d8>
 80032ea:	4b81      	ldr	r3, [pc, #516]	; (80034f0 <UART_SetConfig+0x13b0>)
 80032ec:	e014      	b.n	8003318 <UART_SetConfig+0x11d8>
 80032ee:	4b81      	ldr	r3, [pc, #516]	; (80034f4 <UART_SetConfig+0x13b4>)
 80032f0:	e012      	b.n	8003318 <UART_SetConfig+0x11d8>
 80032f2:	4b81      	ldr	r3, [pc, #516]	; (80034f8 <UART_SetConfig+0x13b8>)
 80032f4:	e010      	b.n	8003318 <UART_SetConfig+0x11d8>
 80032f6:	4b81      	ldr	r3, [pc, #516]	; (80034fc <UART_SetConfig+0x13bc>)
 80032f8:	e00e      	b.n	8003318 <UART_SetConfig+0x11d8>
 80032fa:	4b81      	ldr	r3, [pc, #516]	; (8003500 <UART_SetConfig+0x13c0>)
 80032fc:	e00c      	b.n	8003318 <UART_SetConfig+0x11d8>
 80032fe:	4b81      	ldr	r3, [pc, #516]	; (8003504 <UART_SetConfig+0x13c4>)
 8003300:	e00a      	b.n	8003318 <UART_SetConfig+0x11d8>
 8003302:	4b81      	ldr	r3, [pc, #516]	; (8003508 <UART_SetConfig+0x13c8>)
 8003304:	e008      	b.n	8003318 <UART_SetConfig+0x11d8>
 8003306:	4b81      	ldr	r3, [pc, #516]	; (800350c <UART_SetConfig+0x13cc>)
 8003308:	e006      	b.n	8003318 <UART_SetConfig+0x11d8>
 800330a:	4b81      	ldr	r3, [pc, #516]	; (8003510 <UART_SetConfig+0x13d0>)
 800330c:	e004      	b.n	8003318 <UART_SetConfig+0x11d8>
 800330e:	4b81      	ldr	r3, [pc, #516]	; (8003514 <UART_SetConfig+0x13d4>)
 8003310:	e002      	b.n	8003318 <UART_SetConfig+0x11d8>
 8003312:	4b81      	ldr	r3, [pc, #516]	; (8003518 <UART_SetConfig+0x13d8>)
 8003314:	e000      	b.n	8003318 <UART_SetConfig+0x11d8>
 8003316:	4b76      	ldr	r3, [pc, #472]	; (80034f0 <UART_SetConfig+0x13b0>)
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6852      	ldr	r2, [r2, #4]
 800331c:	0852      	lsrs	r2, r2, #1
 800331e:	441a      	add	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	b29b      	uxth	r3, r3
 800332a:	61fb      	str	r3, [r7, #28]
        break;
 800332c:	e0bd      	b.n	80034aa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800332e:	f7fe fb8b 	bl	8001a48 <HAL_RCC_GetSysClockFreq>
 8003332:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	2b00      	cmp	r3, #0
 800333a:	d044      	beq.n	80033c6 <UART_SetConfig+0x1286>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	2b01      	cmp	r3, #1
 8003342:	d03e      	beq.n	80033c2 <UART_SetConfig+0x1282>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003348:	2b02      	cmp	r3, #2
 800334a:	d038      	beq.n	80033be <UART_SetConfig+0x127e>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003350:	2b03      	cmp	r3, #3
 8003352:	d032      	beq.n	80033ba <UART_SetConfig+0x127a>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003358:	2b04      	cmp	r3, #4
 800335a:	d02c      	beq.n	80033b6 <UART_SetConfig+0x1276>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	2b05      	cmp	r3, #5
 8003362:	d026      	beq.n	80033b2 <UART_SetConfig+0x1272>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	2b06      	cmp	r3, #6
 800336a:	d020      	beq.n	80033ae <UART_SetConfig+0x126e>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	2b07      	cmp	r3, #7
 8003372:	d01a      	beq.n	80033aa <UART_SetConfig+0x126a>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	2b08      	cmp	r3, #8
 800337a:	d014      	beq.n	80033a6 <UART_SetConfig+0x1266>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003380:	2b09      	cmp	r3, #9
 8003382:	d00e      	beq.n	80033a2 <UART_SetConfig+0x1262>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	2b0a      	cmp	r3, #10
 800338a:	d008      	beq.n	800339e <UART_SetConfig+0x125e>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003390:	2b0b      	cmp	r3, #11
 8003392:	d102      	bne.n	800339a <UART_SetConfig+0x125a>
 8003394:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003398:	e016      	b.n	80033c8 <UART_SetConfig+0x1288>
 800339a:	2301      	movs	r3, #1
 800339c:	e014      	b.n	80033c8 <UART_SetConfig+0x1288>
 800339e:	2380      	movs	r3, #128	; 0x80
 80033a0:	e012      	b.n	80033c8 <UART_SetConfig+0x1288>
 80033a2:	2340      	movs	r3, #64	; 0x40
 80033a4:	e010      	b.n	80033c8 <UART_SetConfig+0x1288>
 80033a6:	2320      	movs	r3, #32
 80033a8:	e00e      	b.n	80033c8 <UART_SetConfig+0x1288>
 80033aa:	2310      	movs	r3, #16
 80033ac:	e00c      	b.n	80033c8 <UART_SetConfig+0x1288>
 80033ae:	230c      	movs	r3, #12
 80033b0:	e00a      	b.n	80033c8 <UART_SetConfig+0x1288>
 80033b2:	230a      	movs	r3, #10
 80033b4:	e008      	b.n	80033c8 <UART_SetConfig+0x1288>
 80033b6:	2308      	movs	r3, #8
 80033b8:	e006      	b.n	80033c8 <UART_SetConfig+0x1288>
 80033ba:	2306      	movs	r3, #6
 80033bc:	e004      	b.n	80033c8 <UART_SetConfig+0x1288>
 80033be:	2304      	movs	r3, #4
 80033c0:	e002      	b.n	80033c8 <UART_SetConfig+0x1288>
 80033c2:	2302      	movs	r3, #2
 80033c4:	e000      	b.n	80033c8 <UART_SetConfig+0x1288>
 80033c6:	2301      	movs	r3, #1
 80033c8:	693a      	ldr	r2, [r7, #16]
 80033ca:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	085b      	lsrs	r3, r3, #1
 80033d4:	441a      	add	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	fbb2 f3f3 	udiv	r3, r2, r3
 80033de:	b29b      	uxth	r3, r3
 80033e0:	61fb      	str	r3, [r7, #28]
        break;
 80033e2:	e062      	b.n	80034aa <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d04e      	beq.n	800348a <UART_SetConfig+0x134a>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d047      	beq.n	8003484 <UART_SetConfig+0x1344>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d040      	beq.n	800347e <UART_SetConfig+0x133e>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	2b03      	cmp	r3, #3
 8003402:	d039      	beq.n	8003478 <UART_SetConfig+0x1338>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	2b04      	cmp	r3, #4
 800340a:	d032      	beq.n	8003472 <UART_SetConfig+0x1332>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003410:	2b05      	cmp	r3, #5
 8003412:	d02b      	beq.n	800346c <UART_SetConfig+0x132c>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	2b06      	cmp	r3, #6
 800341a:	d024      	beq.n	8003466 <UART_SetConfig+0x1326>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003420:	2b07      	cmp	r3, #7
 8003422:	d01d      	beq.n	8003460 <UART_SetConfig+0x1320>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	2b08      	cmp	r3, #8
 800342a:	d016      	beq.n	800345a <UART_SetConfig+0x131a>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003430:	2b09      	cmp	r3, #9
 8003432:	d00f      	beq.n	8003454 <UART_SetConfig+0x1314>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003438:	2b0a      	cmp	r3, #10
 800343a:	d008      	beq.n	800344e <UART_SetConfig+0x130e>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	2b0b      	cmp	r3, #11
 8003442:	d101      	bne.n	8003448 <UART_SetConfig+0x1308>
 8003444:	2380      	movs	r3, #128	; 0x80
 8003446:	e022      	b.n	800348e <UART_SetConfig+0x134e>
 8003448:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800344c:	e01f      	b.n	800348e <UART_SetConfig+0x134e>
 800344e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003452:	e01c      	b.n	800348e <UART_SetConfig+0x134e>
 8003454:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003458:	e019      	b.n	800348e <UART_SetConfig+0x134e>
 800345a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800345e:	e016      	b.n	800348e <UART_SetConfig+0x134e>
 8003460:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003464:	e013      	b.n	800348e <UART_SetConfig+0x134e>
 8003466:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800346a:	e010      	b.n	800348e <UART_SetConfig+0x134e>
 800346c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8003470:	e00d      	b.n	800348e <UART_SetConfig+0x134e>
 8003472:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003476:	e00a      	b.n	800348e <UART_SetConfig+0x134e>
 8003478:	f241 5355 	movw	r3, #5461	; 0x1555
 800347c:	e007      	b.n	800348e <UART_SetConfig+0x134e>
 800347e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003482:	e004      	b.n	800348e <UART_SetConfig+0x134e>
 8003484:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003488:	e001      	b.n	800348e <UART_SetConfig+0x134e>
 800348a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6852      	ldr	r2, [r2, #4]
 8003492:	0852      	lsrs	r2, r2, #1
 8003494:	441a      	add	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	fbb2 f3f3 	udiv	r3, r2, r3
 800349e:	b29b      	uxth	r3, r3
 80034a0:	61fb      	str	r3, [r7, #28]
        break;
 80034a2:	e002      	b.n	80034aa <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	76fb      	strb	r3, [r7, #27]
        break;
 80034a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	2b0f      	cmp	r3, #15
 80034ae:	d908      	bls.n	80034c2 <UART_SetConfig+0x1382>
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b6:	d204      	bcs.n	80034c2 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	60da      	str	r2, [r3, #12]
 80034c0:	e001      	b.n	80034c6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2201      	movs	r2, #1
 80034ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80034e2:	7efb      	ldrb	r3, [r7, #27]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3728      	adds	r7, #40	; 0x28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80034ee:	bf00      	nop
 80034f0:	00f42400 	.word	0x00f42400
 80034f4:	0001e848 	.word	0x0001e848
 80034f8:	0003d090 	.word	0x0003d090
 80034fc:	0007a120 	.word	0x0007a120
 8003500:	000f4240 	.word	0x000f4240
 8003504:	00145855 	.word	0x00145855
 8003508:	00186a00 	.word	0x00186a00
 800350c:	001e8480 	.word	0x001e8480
 8003510:	0028b0aa 	.word	0x0028b0aa
 8003514:	003d0900 	.word	0x003d0900
 8003518:	007a1200 	.word	0x007a1200

0800351c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354a:	f003 0302 	and.w	r3, r3, #2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00a      	beq.n	800358a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00a      	beq.n	80035ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	f003 0310 	and.w	r3, r3, #16
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d00a      	beq.n	80035ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	f003 0320 	and.w	r3, r3, #32
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d00a      	beq.n	80035f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d01a      	beq.n	8003632 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800361a:	d10a      	bne.n	8003632 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	605a      	str	r2, [r3, #4]
  }
}
 8003654:	bf00      	nop
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af02      	add	r7, sp, #8
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003670:	f7fd f9dc 	bl	8000a2c <HAL_GetTick>
 8003674:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b08      	cmp	r3, #8
 8003682:	d10e      	bne.n	80036a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003684:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003688:	9300      	str	r3, [sp, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f82c 	bl	80036f0 <UART_WaitOnFlagUntilTimeout>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e022      	b.n	80036e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0304 	and.w	r3, r3, #4
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d10e      	bne.n	80036ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f816 	bl	80036f0 <UART_WaitOnFlagUntilTimeout>
 80036c4:	4603      	mov	r3, r0
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d001      	beq.n	80036ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e00c      	b.n	80036e8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2220      	movs	r2, #32
 80036d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}

080036f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	603b      	str	r3, [r7, #0]
 80036fc:	4613      	mov	r3, r2
 80036fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003700:	e02c      	b.n	800375c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003702:	69bb      	ldr	r3, [r7, #24]
 8003704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003708:	d028      	beq.n	800375c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800370a:	f7fd f98f 	bl	8000a2c <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	429a      	cmp	r2, r3
 8003718:	d302      	bcc.n	8003720 <UART_WaitOnFlagUntilTimeout+0x30>
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d11d      	bne.n	800375c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800372e:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689a      	ldr	r2, [r3, #8]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0201 	bic.w	r2, r2, #1
 800373e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2220      	movs	r2, #32
 8003744:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e00f      	b.n	800377c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	69da      	ldr	r2, [r3, #28]
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	4013      	ands	r3, r2
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	429a      	cmp	r2, r3
 800376a:	bf0c      	ite	eq
 800376c:	2301      	moveq	r3, #1
 800376e:	2300      	movne	r3, #0
 8003770:	b2db      	uxtb	r3, r3
 8003772:	461a      	mov	r2, r3
 8003774:	79fb      	ldrb	r3, [r7, #7]
 8003776:	429a      	cmp	r2, r3
 8003778:	d0c3      	beq.n	8003702 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003792:	2b01      	cmp	r3, #1
 8003794:	d101      	bne.n	800379a <HAL_UARTEx_DisableFifoMode+0x16>
 8003796:	2302      	movs	r3, #2
 8003798:	e027      	b.n	80037ea <HAL_UARTEx_DisableFifoMode+0x66>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2224      	movs	r2, #36	; 0x24
 80037a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	681a      	ldr	r2, [r3, #0]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f022 0201 	bic.w	r2, r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80037c8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68fa      	ldr	r2, [r7, #12]
 80037d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2220      	movs	r2, #32
 80037dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr

080037f6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b084      	sub	sp, #16
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
 80037fe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003806:	2b01      	cmp	r3, #1
 8003808:	d101      	bne.n	800380e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800380a:	2302      	movs	r3, #2
 800380c:	e02d      	b.n	800386a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2201      	movs	r2, #1
 8003812:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2224      	movs	r2, #36	; 0x24
 800381a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	681a      	ldr	r2, [r3, #0]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f022 0201 	bic.w	r2, r2, #1
 8003834:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f000 f850 	bl	80038f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b084      	sub	sp, #16
 8003876:	af00      	add	r7, sp, #0
 8003878:	6078      	str	r0, [r7, #4]
 800387a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003882:	2b01      	cmp	r3, #1
 8003884:	d101      	bne.n	800388a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003886:	2302      	movs	r3, #2
 8003888:	e02d      	b.n	80038e6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2224      	movs	r2, #36	; 0x24
 8003896:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	681a      	ldr	r2, [r3, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f022 0201 	bic.w	r2, r2, #1
 80038b0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f812 	bl	80038f0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
	...

080038f0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b089      	sub	sp, #36	; 0x24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80038f8:	4a2f      	ldr	r2, [pc, #188]	; (80039b8 <UARTEx_SetNbDataToProcess+0xc8>)
 80038fa:	f107 0314 	add.w	r3, r7, #20
 80038fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003902:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003906:	4a2d      	ldr	r2, [pc, #180]	; (80039bc <UARTEx_SetNbDataToProcess+0xcc>)
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003910:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003918:	2b00      	cmp	r3, #0
 800391a:	d108      	bne.n	800392e <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800392c:	e03d      	b.n	80039aa <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800392e:	2308      	movs	r3, #8
 8003930:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003932:	2308      	movs	r3, #8
 8003934:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	0e5b      	lsrs	r3, r3, #25
 800393e:	b2db      	uxtb	r3, r3
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	0f5b      	lsrs	r3, r3, #29
 800394e:	b2db      	uxtb	r3, r3
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003956:	7fbb      	ldrb	r3, [r7, #30]
 8003958:	7f3a      	ldrb	r2, [r7, #28]
 800395a:	f107 0120 	add.w	r1, r7, #32
 800395e:	440a      	add	r2, r1
 8003960:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8003964:	fb02 f303 	mul.w	r3, r2, r3
 8003968:	7f3a      	ldrb	r2, [r7, #28]
 800396a:	f107 0120 	add.w	r1, r7, #32
 800396e:	440a      	add	r2, r1
 8003970:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8003974:	fb93 f3f2 	sdiv	r3, r3, r2
 8003978:	b29a      	uxth	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003980:	7ffb      	ldrb	r3, [r7, #31]
 8003982:	7f7a      	ldrb	r2, [r7, #29]
 8003984:	f107 0120 	add.w	r1, r7, #32
 8003988:	440a      	add	r2, r1
 800398a:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800398e:	fb02 f303 	mul.w	r3, r2, r3
 8003992:	7f7a      	ldrb	r2, [r7, #29]
 8003994:	f107 0120 	add.w	r1, r7, #32
 8003998:	440a      	add	r2, r1
 800399a:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800399e:	fb93 f3f2 	sdiv	r3, r3, r2
 80039a2:	b29a      	uxth	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80039aa:	bf00      	nop
 80039ac:	3724      	adds	r7, #36	; 0x24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	08003a30 	.word	0x08003a30
 80039bc:	08003a38 	.word	0x08003a38

080039c0 <__libc_init_array>:
 80039c0:	b570      	push	{r4, r5, r6, lr}
 80039c2:	4e0d      	ldr	r6, [pc, #52]	; (80039f8 <__libc_init_array+0x38>)
 80039c4:	4c0d      	ldr	r4, [pc, #52]	; (80039fc <__libc_init_array+0x3c>)
 80039c6:	1ba4      	subs	r4, r4, r6
 80039c8:	10a4      	asrs	r4, r4, #2
 80039ca:	2500      	movs	r5, #0
 80039cc:	42a5      	cmp	r5, r4
 80039ce:	d109      	bne.n	80039e4 <__libc_init_array+0x24>
 80039d0:	4e0b      	ldr	r6, [pc, #44]	; (8003a00 <__libc_init_array+0x40>)
 80039d2:	4c0c      	ldr	r4, [pc, #48]	; (8003a04 <__libc_init_array+0x44>)
 80039d4:	f000 f820 	bl	8003a18 <_init>
 80039d8:	1ba4      	subs	r4, r4, r6
 80039da:	10a4      	asrs	r4, r4, #2
 80039dc:	2500      	movs	r5, #0
 80039de:	42a5      	cmp	r5, r4
 80039e0:	d105      	bne.n	80039ee <__libc_init_array+0x2e>
 80039e2:	bd70      	pop	{r4, r5, r6, pc}
 80039e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039e8:	4798      	blx	r3
 80039ea:	3501      	adds	r5, #1
 80039ec:	e7ee      	b.n	80039cc <__libc_init_array+0xc>
 80039ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039f2:	4798      	blx	r3
 80039f4:	3501      	adds	r5, #1
 80039f6:	e7f2      	b.n	80039de <__libc_init_array+0x1e>
 80039f8:	08003a60 	.word	0x08003a60
 80039fc:	08003a60 	.word	0x08003a60
 8003a00:	08003a60 	.word	0x08003a60
 8003a04:	08003a64 	.word	0x08003a64

08003a08 <memset>:
 8003a08:	4402      	add	r2, r0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d100      	bne.n	8003a12 <memset+0xa>
 8003a10:	4770      	bx	lr
 8003a12:	f803 1b01 	strb.w	r1, [r3], #1
 8003a16:	e7f9      	b.n	8003a0c <memset+0x4>

08003a18 <_init>:
 8003a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1a:	bf00      	nop
 8003a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1e:	bc08      	pop	{r3}
 8003a20:	469e      	mov	lr, r3
 8003a22:	4770      	bx	lr

08003a24 <_fini>:
 8003a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a26:	bf00      	nop
 8003a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2a:	bc08      	pop	{r3}
 8003a2c:	469e      	mov	lr, r3
 8003a2e:	4770      	bx	lr
